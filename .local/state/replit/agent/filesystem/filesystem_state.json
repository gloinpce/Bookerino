{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: Hotel Management Automation Platform\n\n## Design Approach\n**System Selected:** Modern SaaS Dashboard (inspired by Linear, Notion, and Booking.com Extranet)\n**Rationale:** This is a utility-focused application for hotel staff requiring efficiency, clarity, and data density. Professional dashboard aesthetics with excellent information hierarchy.\n\n## Core Design Elements\n\n### A. Color Palette\n**Light Mode:**\n- Primary: 220 90% 45% (Professional blue for actions, headers)\n- Background: 0 0% 100% (Pure white)\n- Surface: 220 15% 97% (Light gray for cards)\n- Border: 220 15% 88% (Subtle dividers)\n- Text Primary: 220 15% 15%\n- Text Secondary: 220 10% 45%\n\n**Dark Mode:**\n- Primary: 220 90% 55%\n- Background: 220 15% 10%\n- Surface: 220 15% 14%\n- Border: 220 15% 22%\n- Text Primary: 220 15% 95%\n- Text Secondary: 220 10% 65%\n\n**Status Colors:**\n- Success (Confirmed bookings): 142 76% 36%\n- Warning (Pending): 38 92% 50%\n- Error (Cancelled): 0 72% 51%\n- Info (Checked-in): 199 89% 48%\n\n### B. Typography\n**Font Families:**\n- Primary: 'Inter' (headings, UI elements)\n- Secondary: 'Inter' (body, data)\n\n**Scale:**\n- H1: text-3xl font-bold (Dashboard titles)\n- H2: text-2xl font-semibold (Section headers)\n- H3: text-xl font-semibold (Card titles)\n- Body: text-base (Standard content)\n- Small: text-sm (Labels, metadata)\n- Tiny: text-xs (Timestamps, helper text)\n\n### C. Layout System\n**Spacing Primitives:** Use 4, 6, 8, 12, 16, 24 units\n- Component padding: p-6\n- Card spacing: space-y-4\n- Section margins: mb-8\n- Container max-width: max-w-7xl\n\n**Grid System:**\n- Dashboard stats: grid-cols-1 md:grid-cols-2 lg:grid-cols-4\n- Booking cards: grid-cols-1 lg:grid-cols-2 xl:grid-cols-3\n- Main layout: Sidebar (w-64) + Content area\n\n### D. Component Library\n\n**Navigation:**\n- Persistent sidebar with hotel logo, main sections (Dashboard, Bookings, Reviews, Rooms, Analytics)\n- Top bar with search, notifications, user profile\n- Breadcrumb navigation for deep pages\n\n**Dashboard Cards:**\n- Stats cards with icon, metric, change indicator (↑ 12% vs last week)\n- Quick actions buttons\n- Recent activity feed\n- Upcoming check-ins/check-outs list\n\n**Data Tables:**\n- Sortable columns with hover states\n- Row actions (view, edit, delete)\n- Pagination and filters\n- Status badges with appropriate colors\n- Responsive: stack to cards on mobile\n\n**Booking Management:**\n- Calendar view with availability heatmap\n- Booking detail cards with guest info, room type, dates, status\n- Quick status update dropdown\n- Guest communication timeline\n\n**Review Interface:**\n- Review cards with star rating, guest name, date\n- Response textarea with character counter\n- Sentiment indicators (positive/negative)\n- Filter by rating and date\n\n**Forms:**\n- Floating labels for inputs\n- Clear validation states (border color changes)\n- Helper text below fields\n- Action buttons right-aligned\n\n**Modals/Overlays:**\n- Centered modals with backdrop blur\n- Clear close button\n- Action buttons in footer\n\n### E. Imagery\n\n**Dashboard:**\n- No hero image (utility app)\n- Small hotel logo in sidebar\n- Icons for stat cards (booking icon, revenue icon, guest icon, room icon)\n- Empty states with simple illustrations\n\n**Room Management:**\n- Room thumbnail images in cards (4:3 ratio, rounded corners)\n- Image gallery in detail view\n\n## Page Structure\n\n### Dashboard Layout\n- Sidebar navigation (left, fixed)\n- Top stats row (4 KPI cards)\n- Main grid: Recent bookings (left 2/3) + Quick actions sidebar (right 1/3)\n- Bottom: Upcoming check-ins calendar view\n\n### Bookings Page\n- Filter bar (status, date range, room type)\n- Booking cards grid with status badges\n- Click to expand detail view (sliding panel from right)\n\n### Reviews Page\n- Review cards with star rating prominently displayed\n- Inline reply functionality\n- Filter/sort toolbar\n\n### Room Management\n- Room cards with image, name, capacity, price\n- Availability calendar overlay\n- Quick edit actions\n\n### Analytics Page\n- Date range selector\n- Chart cards (revenue trend, occupancy rate, booking sources)\n- Exportable data tables\n\n## Design Principles\n1. **Information Density:** Maximize useful data per screen while maintaining readability\n2. **Status Clarity:** Use color-coded badges and icons for quick scanning\n3. **Action Accessibility:** Primary actions always visible, secondary in menus\n4. **Responsive Data:** Tables collapse to cards on mobile\n5. **Consistent Hierarchy:** Clear visual weight from primary to tertiary information\n\n## Animations\nMinimal and purposeful only:\n- Smooth transitions on modal open/close (200ms)\n- Hover states on interactive elements\n- Loading skeletons for data fetching","size_bytes":4651},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BOOKERINO - Hotel Management Automation Platform\n\n## Overview\n\nBOOKERINO is a professional hotel management automation platform designed for modern hoteliers. The system provides comprehensive tools for managing bookings, rooms, reviews, and analytics in a unified dashboard interface. Built with a focus on efficiency and data clarity, it streamlines hotel operations through automated workflows and real-time insights.\n\nThe platform features a modern SaaS dashboard design inspired by Linear, Notion, and Booking.com Extranet, emphasizing utility, professional aesthetics, and excellent information hierarchy for hotel staff.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast HMR (Hot Module Replacement)\n- Wouter for lightweight client-side routing instead of React Router\n- Path aliases configured for clean imports (`@/`, `@shared/`, `@assets/`)\n\n**UI Component System:**\n- Shadcn/ui component library with Radix UI primitives for accessible, unstyled components\n- Tailwind CSS for utility-first styling with custom design tokens\n- CSS variables for dynamic theming (light/dark mode support)\n- Custom design system with defined color palette, typography scale, and spacing primitives\n- Component composition pattern using `class-variance-authority` for variant management\n\n**State Management:**\n- TanStack Query (React Query) for server state management and caching\n- React Hook Form with Zod for form validation\n- Context API for theme management and sidebar state\n- Custom hooks for authentication (`useAuth`) and mobile detection\n\n**Design Tokens:**\n- Comprehensive color system with semantic naming (primary, secondary, destructive, muted, accent)\n- Status colors for booking states (confirmed, pending, cancelled, checked-in)\n- Light and dark mode variants with HSL color space\n- Inter font family for consistent typography\n- Standardized spacing scale (4, 6, 8, 12, 16, 24 units)\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js for HTTP server and routing\n- TypeScript with ES Modules for modern JavaScript features\n- Separate development and production build processes (tsx for dev, esbuild for production)\n\n**Database Layer:**\n- Neon Serverless PostgreSQL as the database provider\n- Drizzle ORM for type-safe database operations\n- Schema-first approach with TypeScript types generated from database schema\n- Connection pooling via `@neondatabase/serverless`\n- WebSocket support for serverless PostgreSQL connections\n\n**Data Models:**\n- **Users:** Authentication and profile management (id, email, firstName, lastName, profileImageUrl)\n- **Rooms:** Hotel room inventory (id, name, type, capacity, price, status)\n- **Bookings:** Reservation management (id, guestName, guestEmail, roomId, checkIn, checkOut, status, totalPrice, source, createdAt)\n  - Source field tracks booking origin: \"direct\", \"booking.com\", \"airbnb\", etc.\n- **Reviews:** Guest feedback system (id, guestName, bookingId, rating, comment, response, createdAt)\n- **Integrations:** External platform connections (id, platform, apiKey, apiSecret, propertyId, isActive, lastSyncAt, createdAt, updatedAt)\n  - Stores credentials for Booking.com and other external booking platforms\n- **Meals:** Restaurant menu management (id, name, description, category, price, validFrom, validTo, availableDays, consumptionCount, isActive, createdAt, updatedAt)\n  - Tracks meal validity periods, available days (1-7 for Mon-Sun), consumption statistics, and active status\n  - Supports date-based and day-of-week availability rules\n- **Sessions:** Server-side session storage for authentication\n\n**Authentication System:**\n- Replit Auth integration using OpenID Connect (OIDC)\n- Passport.js strategy for authentication flows\n- Server-side session management with PostgreSQL storage (connect-pg-simple)\n- Session cookies with secure flags and 1-week TTL\n- Protected routes using `isAuthenticated` middleware\n\n**Storage Layer:**\n- Interface-based storage abstraction (`IStorage`) for potential future implementations\n- DatabaseStorage class implementing CRUD operations for all entities\n- Centralized database connection management\n- Transaction support through Drizzle ORM\n\n### API Architecture\n\n**REST Endpoints:**\n- `/api/auth/user` - Get authenticated user information\n- `/api/rooms` - CRUD operations for room management\n- `/api/bookings` - CRUD operations for booking management\n- `/api/reviews` - CRUD operations for review management\n- `/api/meals` - CRUD operations for meal/menu management\n- `/api/meals/:id/consume` - Increment meal consumption counter\n- `/api/analytics/advanced` - Advanced analytics with revenue trends, occupancy rate, and booking source distribution\n- `/api/integrations` - CRUD operations for external platform integrations (Booking.com, etc.)\n- All routes protected with authentication middleware\n\n**Response Format:**\n- JSON responses with consistent error handling\n- Status codes: 200 (success), 401 (unauthorized), 500 (server error)\n- Error messages in `{ message: string }` format\n- Request/response logging for API routes with duration tracking\n\n**Request Handling:**\n- JSON body parsing with Express middleware\n- URL-encoded form data support\n- CORS and credentials enabled for cross-origin requests\n- Custom error handling middleware for centralized error responses\n\n### Development Tools\n\n**Type Safety:**\n- Shared TypeScript types between client and server via `@shared` alias\n- Drizzle-Zod integration for runtime validation from database schema\n- Strict TypeScript configuration with incremental builds\n\n**Development Experience:**\n- Replit-specific plugins for cartographer and dev banner (development only)\n- Runtime error overlay for immediate feedback\n- Custom Vite middleware mode for Express integration\n- Hot Module Replacement preserving server state\n\n**Code Quality:**\n- TypeScript strict mode enabled\n- ESModuleInterop for CommonJS compatibility\n- Skip lib check for faster builds\n- Centralized utility functions (cn for className merging)\n\n## External Dependencies\n\n### Third-Party Services\n\n**Authentication:**\n- Replit Auth (OpenID Connect provider)\n- Session issuer URL: `https://replit.com/oidc`\n- Requires `REPL_ID`, `ISSUER_URL`, and `SESSION_SECRET` environment variables\n\n**Database:**\n- Neon Serverless PostgreSQL\n- Requires `DATABASE_URL` environment variable\n- WebSocket-based connection for serverless environments\n\n### Key NPM Packages\n\n**Frontend Libraries:**\n- `@tanstack/react-query` - Server state management and caching\n- `@radix-ui/*` - 20+ accessible UI component primitives\n- `react-hook-form` + `@hookform/resolvers` - Form handling with validation\n- `zod` + `drizzle-zod` - Runtime type validation\n- `date-fns` - Date manipulation and formatting\n- `recharts` - Data visualization for analytics\n- `lucide-react` - Icon system\n- `class-variance-authority` - Component variant management\n- `tailwindcss` + `autoprefixer` - Styling system\n- `wouter` - Lightweight routing\n\n**Backend Libraries:**\n- `drizzle-orm` - Type-safe database ORM\n- `@neondatabase/serverless` - PostgreSQL driver\n- `express` + `express-session` - HTTP server and session management\n- `passport` + `openid-client` - Authentication framework\n- `connect-pg-simple` - PostgreSQL session store\n- `memoizee` - Function memoization for OIDC config\n\n**Build Tools:**\n- `vite` - Frontend bundler and dev server\n- `esbuild` - Production server bundling\n- `tsx` - TypeScript execution for development\n- `drizzle-kit` - Database migration tools\n- `@vitejs/plugin-react` - React support for Vite\n- Replit-specific Vite plugins for development enhancements\n\n### Configuration Requirements\n\n**Environment Variables:**\n- `DATABASE_URL` - PostgreSQL connection string (required)\n- `REPL_ID` - Replit deployment identifier (required for auth)\n- `SESSION_SECRET` - Secret key for session encryption (required)\n- `ISSUER_URL` - OIDC issuer URL (defaults to Replit OIDC)\n- `REPLIT_DOMAINS` - Allowed domains for authentication\n- `NODE_ENV` - Environment flag (development/production)\n\n**Database Setup:**\n- PostgreSQL database provisioned through Neon or compatible provider\n- Migrations managed through `drizzle-kit push` command\n- Session table (`sessions`) required for authentication\n- UUID generation support (`gen_random_uuid()`) required for primary keys","size_bytes":8493},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertRoomSchema, insertBookingSchema, insertReviewSchema, updateReviewResponseSchema, insertIntegrationSchema, insertMealSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Room routes\n  app.get(\"/api/rooms\", isAuthenticated, async (req, res) => {\n    try {\n      const rooms = await storage.getRooms();\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.post(\"/api/rooms\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertRoomSchema.parse(req.body);\n      const room = await storage.createRoom(validatedData);\n      res.json(room);\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(500).json({ message: \"Failed to create room\" });\n    }\n  });\n\n  app.patch(\"/api/rooms/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertRoomSchema.partial().parse(req.body);\n      const room = await storage.updateRoom(req.params.id, validatedData);\n      res.json(room);\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      res.status(500).json({ message: \"Failed to update room\" });\n    }\n  });\n\n  app.delete(\"/api/rooms/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteRoom(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      res.status(500).json({ message: \"Failed to delete room\" });\n    }\n  });\n\n  // Booking routes\n  app.get(\"/api/bookings\", isAuthenticated, async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking(validatedData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertBookingSchema.partial().parse(req.body);\n      const booking = await storage.updateBooking(req.params.id, validatedData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteBooking(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Review routes\n  app.get(\"/api/reviews\", isAuthenticated, async (req, res) => {\n    try {\n      const reviews = await storage.getReviews();\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertReviewSchema.parse(req.body);\n      const review = await storage.createReview(validatedData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.patch(\"/api/reviews/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = updateReviewResponseSchema.parse(req.body);\n      const review = await storage.updateReview(req.params.id, validatedData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error updating review:\", error);\n      res.status(500).json({ message: \"Failed to update review\" });\n    }\n  });\n\n  app.delete(\"/api/reviews/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteReview(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting review:\", error);\n      res.status(500).json({ message: \"Failed to delete review\" });\n    }\n  });\n\n  // Advanced Analytics routes\n  app.get(\"/api/analytics/advanced\", isAuthenticated, async (req, res) => {\n    try {\n      const analytics = await storage.getAdvancedAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching advanced analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch advanced analytics\" });\n    }\n  });\n\n  // Integration routes\n  app.get(\"/api/integrations\", isAuthenticated, async (req, res) => {\n    try {\n      const integrations = await storage.getIntegrations();\n      res.json(integrations);\n    } catch (error) {\n      console.error(\"Error fetching integrations:\", error);\n      res.status(500).json({ message: \"Failed to fetch integrations\" });\n    }\n  });\n\n  app.post(\"/api/integrations\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertIntegrationSchema.parse(req.body);\n      const integration = await storage.createIntegration(validatedData);\n      res.json(integration);\n    } catch (error) {\n      console.error(\"Error creating integration:\", error);\n      res.status(500).json({ message: \"Failed to create integration\" });\n    }\n  });\n\n  app.patch(\"/api/integrations/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertIntegrationSchema.partial().parse(req.body);\n      const integration = await storage.updateIntegration(req.params.id, validatedData);\n      res.json(integration);\n    } catch (error) {\n      console.error(\"Error updating integration:\", error);\n      res.status(500).json({ message: \"Failed to update integration\" });\n    }\n  });\n\n  app.delete(\"/api/integrations/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteIntegration(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting integration:\", error);\n      res.status(500).json({ message: \"Failed to delete integration\" });\n    }\n  });\n\n  // Meal routes\n  app.get(\"/api/meals\", isAuthenticated, async (req, res) => {\n    try {\n      const meals = await storage.getMeals();\n      res.json(meals);\n    } catch (error) {\n      console.error(\"Error fetching meals:\", error);\n      res.status(500).json({ message: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.post(\"/api/meals\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertMealSchema.parse(req.body);\n      const meal = await storage.createMeal(validatedData);\n      res.json(meal);\n    } catch (error) {\n      console.error(\"Error creating meal:\", error);\n      res.status(500).json({ message: \"Failed to create meal\" });\n    }\n  });\n\n  app.patch(\"/api/meals/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertMealSchema.partial().parse(req.body);\n      const meal = await storage.updateMeal(req.params.id, validatedData);\n      res.json(meal);\n    } catch (error) {\n      console.error(\"Error updating meal:\", error);\n      res.status(500).json({ message: \"Failed to update meal\" });\n    }\n  });\n\n  app.delete(\"/api/meals/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteMeal(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting meal:\", error);\n      res.status(500).json({ message: \"Failed to delete meal\" });\n    }\n  });\n\n  app.post(\"/api/meals/:id/consume\", isAuthenticated, async (req, res) => {\n    try {\n      const meal = await storage.incrementMealConsumption(req.params.id);\n      res.json(meal);\n    } catch (error) {\n      console.error(\"Error incrementing meal consumption:\", error);\n      res.status(500).json({ message: \"Failed to increment meal consumption\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":8945},"server/storage.ts":{"content":"import {\n  users,\n  rooms,\n  bookings,\n  reviews,\n  integrations,\n  meals,\n  type User,\n  type UpsertUser,\n  type Room,\n  type InsertRoom,\n  type Booking,\n  type InsertBooking,\n  type Review,\n  type InsertReview,\n  type Integration,\n  type InsertIntegration,\n  type Meal,\n  type InsertMeal,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Room operations\n  getRooms(): Promise<Room[]>;\n  getRoom(id: string): Promise<Room | undefined>;\n  createRoom(room: InsertRoom): Promise<Room>;\n  updateRoom(id: string, room: Partial<InsertRoom>): Promise<Room>;\n  deleteRoom(id: string): Promise<void>;\n  \n  // Booking operations\n  getBookings(): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking>;\n  deleteBooking(id: string): Promise<void>;\n  \n  // Review operations\n  getReviews(): Promise<Review[]>;\n  getReview(id: string): Promise<Review | undefined>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, review: Partial<InsertReview>): Promise<Review>;\n  deleteReview(id: string): Promise<void>;\n\n  // Analytics operations\n  getAdvancedAnalytics(): Promise<any>;\n\n  // Integration operations\n  getIntegrations(): Promise<Integration[]>;\n  getIntegration(id: string): Promise<Integration | undefined>;\n  getIntegrationByPlatform(platform: string): Promise<Integration | undefined>;\n  createIntegration(integration: InsertIntegration): Promise<Integration>;\n  updateIntegration(id: string, integration: Partial<InsertIntegration>): Promise<Integration>;\n  deleteIntegration(id: string): Promise<void>;\n\n  // Meal operations\n  getMeals(): Promise<Meal[]>;\n  getMeal(id: string): Promise<Meal | undefined>;\n  createMeal(meal: InsertMeal): Promise<Meal>;\n  updateMeal(id: string, meal: Partial<InsertMeal>): Promise<Meal>;\n  deleteMeal(id: string): Promise<void>;\n  incrementMealConsumption(id: string): Promise<Meal>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Room operations\n  async getRooms(): Promise<Room[]> {\n    return await db.select().from(rooms);\n  }\n\n  async getRoom(id: string): Promise<Room | undefined> {\n    const [room] = await db.select().from(rooms).where(eq(rooms.id, id));\n    return room;\n  }\n\n  async createRoom(roomData: InsertRoom): Promise<Room> {\n    const [room] = await db.insert(rooms).values(roomData).returning();\n    return room;\n  }\n\n  async updateRoom(id: string, roomData: Partial<InsertRoom>): Promise<Room> {\n    const [room] = await db\n      .update(rooms)\n      .set(roomData)\n      .where(eq(rooms.id, id))\n      .returning();\n    return room;\n  }\n\n  async deleteRoom(id: string): Promise<void> {\n    await db.delete(rooms).where(eq(rooms.id, id));\n  }\n\n  // Booking operations\n  async getBookings(): Promise<Booking[]> {\n    return await db.select().from(bookings);\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async createBooking(bookingData: InsertBooking): Promise<Booking> {\n    const [booking] = await db.insert(bookings).values(bookingData).returning();\n    return booking;\n  }\n\n  async updateBooking(id: string, bookingData: Partial<InsertBooking>): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set(bookingData)\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  async deleteBooking(id: string): Promise<void> {\n    await db.delete(bookings).where(eq(bookings.id, id));\n  }\n\n  // Review operations\n  async getReviews(): Promise<Review[]> {\n    return await db.select().from(reviews);\n  }\n\n  async getReview(id: string): Promise<Review | undefined> {\n    const [review] = await db.select().from(reviews).where(eq(reviews.id, id));\n    return review;\n  }\n\n  async createReview(reviewData: InsertReview): Promise<Review> {\n    const [review] = await db.insert(reviews).values(reviewData).returning();\n    return review;\n  }\n\n  async updateReview(id: string, reviewData: Partial<InsertReview>): Promise<Review> {\n    const [review] = await db\n      .update(reviews)\n      .set(reviewData)\n      .where(eq(reviews.id, id))\n      .returning();\n    return review;\n  }\n\n  async deleteReview(id: string): Promise<void> {\n    await db.delete(reviews).where(eq(reviews.id, id));\n  }\n\n  // Advanced Analytics operations\n  async getAdvancedAnalytics(): Promise<any> {\n    const allBookings = await db.select().from(bookings);\n    const allRooms = await db.select().from(rooms);\n    \n    // Calculate revenue trend (last 6 months)\n    const now = new Date();\n    const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 5, 1);\n    \n    const revenueTrend = [];\n    for (let i = 5; i >= 0; i--) {\n      const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthName = monthDate.toLocaleDateString('ro-RO', { month: 'short', year: 'numeric' });\n      const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n      const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0, 23, 59, 59);\n      \n      const monthRevenue = allBookings\n        .filter(b => {\n          const bookingDate = new Date(b.createdAt);\n          return bookingDate >= monthStart && bookingDate <= monthEnd && b.status === 'confirmed';\n        })\n        .reduce((sum, b) => {\n          const price = parseFloat(b.totalPrice || \"0\");\n          return sum + (Number.isFinite(price) ? price : 0);\n        }, 0);\n      \n      revenueTrend.push({ month: monthName, revenue: parseFloat(monthRevenue.toFixed(2)) });\n    }\n    \n    // Calculate occupancy rate\n    const today = new Date();\n    const occupiedRooms = allBookings.filter(b => {\n      const checkIn = new Date(b.checkIn);\n      const checkOut = new Date(b.checkOut);\n      return checkIn <= today && checkOut >= today && (b.status === 'confirmed' || b.status === 'checked-in');\n    }).length;\n    \n    const occupancyRate = allRooms.length > 0 \n      ? parseFloat(((occupiedRooms / allRooms.length) * 100).toFixed(1))\n      : 0;\n    \n    // Calculate booking sources\n    const sourceCounts = allBookings.reduce((acc: any, b) => {\n      const source = b.source || 'direct';\n      acc[source] = (acc[source] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const bookingSources = Object.entries(sourceCounts).map(([name, value]) => ({\n      name,\n      value\n    }));\n    \n    return {\n      revenueTrend,\n      occupancyRate,\n      bookingSources\n    };\n  }\n\n  // Integration operations\n  async getIntegrations(): Promise<Integration[]> {\n    return await db.select().from(integrations);\n  }\n\n  async getIntegration(id: string): Promise<Integration | undefined> {\n    const [integration] = await db.select().from(integrations).where(eq(integrations.id, id));\n    return integration;\n  }\n\n  async getIntegrationByPlatform(platform: string): Promise<Integration | undefined> {\n    const [integration] = await db.select().from(integrations).where(eq(integrations.platform, platform));\n    return integration;\n  }\n\n  async createIntegration(integrationData: InsertIntegration): Promise<Integration> {\n    const [integration] = await db.insert(integrations).values(integrationData).returning();\n    return integration;\n  }\n\n  async updateIntegration(id: string, integrationData: Partial<InsertIntegration>): Promise<Integration> {\n    const [integration] = await db\n      .update(integrations)\n      .set({ ...integrationData, updatedAt: new Date() })\n      .where(eq(integrations.id, id))\n      .returning();\n    return integration;\n  }\n\n  async deleteIntegration(id: string): Promise<void> {\n    await db.delete(integrations).where(eq(integrations.id, id));\n  }\n\n  // Meal operations\n  async getMeals(): Promise<Meal[]> {\n    return await db.select().from(meals);\n  }\n\n  async getMeal(id: string): Promise<Meal | undefined> {\n    const [meal] = await db.select().from(meals).where(eq(meals.id, id));\n    return meal;\n  }\n\n  async createMeal(mealData: InsertMeal): Promise<Meal> {\n    const [meal] = await db.insert(meals).values(mealData).returning();\n    return meal;\n  }\n\n  async updateMeal(id: string, mealData: Partial<InsertMeal>): Promise<Meal> {\n    const [meal] = await db\n      .update(meals)\n      .set({ ...mealData, updatedAt: new Date() })\n      .where(eq(meals.id, id))\n      .returning();\n    return meal;\n  }\n\n  async deleteMeal(id: string): Promise<void> {\n    await db.delete(meals).where(eq(meals.id, id));\n  }\n\n  async incrementMealConsumption(id: string): Promise<Meal> {\n    const meal = await this.getMeal(id);\n    if (!meal) {\n      throw new Error(\"Meal not found\");\n    }\n    const [updatedMeal] = await db\n      .update(meals)\n      .set({ \n        consumptionCount: (meal.consumptionCount || 0) + 1,\n        updatedAt: new Date()\n      })\n      .where(eq(meals.id, id))\n      .returning();\n    return updatedMeal;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9770},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const rooms = pgTable(\"rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"available\"),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guestName: text(\"guest_name\").notNull(),\n  guestEmail: text(\"guest_email\").notNull(),\n  roomId: varchar(\"room_id\").notNull(),\n  checkIn: timestamp(\"check_in\").notNull(),\n  checkOut: timestamp(\"check_out\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  source: text(\"source\").notNull().default(\"direct\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guestName: text(\"guest_name\").notNull(),\n  bookingId: varchar(\"booking_id\").notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\").notNull(),\n  response: text(\"response\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const integrations = pgTable(\"integrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: text(\"platform\").notNull(),\n  apiKey: text(\"api_key\"),\n  apiSecret: text(\"api_secret\"),\n  propertyId: text(\"property_id\"),\n  isActive: integer(\"is_active\").notNull().default(0),\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const meals = pgTable(\"meals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  validFrom: timestamp(\"valid_from\"),\n  validTo: timestamp(\"valid_to\"),\n  availableDays: text(\"available_days\").notNull().default(\"1,2,3,4,5,6,7\"),\n  consumptionCount: integer(\"consumption_count\").notNull().default(0),\n  isActive: integer(\"is_active\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const updateReviewResponseSchema = z.object({\n  response: z.string().min(1, \"Response is required\"),\n});\n\nexport const insertIntegrationSchema = createInsertSchema(integrations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastSyncAt: true,\n});\n\nexport const insertMealSchema = createInsertSchema(meals).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  consumptionCount: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Integration = typeof integrations.$inferSelect;\nexport type InsertIntegration = z.infer<typeof insertIntegrationSchema>;\nexport type Meal = typeof meals.$inferSelect;\nexport type InsertMeal = z.infer<typeof insertMealSchema>;\n","size_bytes":4921},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ScrollToTop } from \"@/components/scroll-to-top\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Bookings from \"@/pages/bookings\";\nimport Reviews from \"@/pages/reviews\";\nimport Rooms from \"@/pages/rooms\";\nimport Meals from \"@/pages/meals\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/bookings\" component={Bookings} />\n      <Route path=\"/reviews\" component={Reviews} />\n      <Route path=\"/rooms\" component={Rooms} />\n      <Route path=\"/meals\" component={Meals} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction UnauthenticatedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route component={Landing} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Se încarcă...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <UnauthenticatedRouter />;\n  }\n\n  const sidebarStyle = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  } as React.CSSProperties;\n\n  return (\n    <>\n      <SidebarProvider style={sidebarStyle}>\n        <div className=\"flex h-screen w-full\">\n          <AppSidebar />\n          <div className=\"flex flex-col flex-1\">\n            <header className=\"flex items-center justify-between p-3 border-b\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <ThemeToggle />\n            </header>\n            <main className=\"flex-1 overflow-auto\">\n              <AuthenticatedRouter />\n            </main>\n          </div>\n        </div>\n      </SidebarProvider>\n      <ScrollToTop />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3107},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 223.64deg 14.29% 15.1%;\n\n  --border: 192.12deg 78.78% 48.04%;\n\n  --card: 220 15% 97%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 15% 92%;\n\n  --sidebar: 220 15% 95%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 15% 88%;\n\n  --sidebar-primary: 220 90% 45%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 15% 90%;\n\n  --sidebar-accent-foreground: 220 15% 15%;\n\n  --sidebar-ring: 220 90% 45%;\n\n  --popover: 220 15% 94%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 15% 87%;\n\n  --primary: 192.12deg 78.78% 48.04%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 15% 89%;\n\n  --secondary-foreground: 220 15% 15%;\n\n  --muted: 220 12% 91%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 220 18% 92%;\n\n  --accent-foreground: 222.24deg 100% 75.49%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 221.05deg 14.96% 75.1%;\n  --ring: 192.12deg 78.78% 48.04%;\n  --chart-1: 192.12deg 78.78% 48.04%;\n  --chart-2: 192.12deg 78.78% 48.04%;\n  --chart-3: 192.12deg 78.78% 48.04%;\n  --chart-4: 192.12deg 78.78% 48.04%;\n  --chart-5: 185.6deg 78.78% 48.04%;\n\n  --font-sans: 'Playfair Display', serif;\n  --font-serif: 'Inter', sans-serif;\n  --font-mono: 'Inter', sans-serif;\n  --radius: 0.7rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.08), 0px 2px 4px -2px hsl(220 15% 15% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.10), 0px 3px 6px -3px hsl(220 15% 15% / 0.08);\n  --shadow-lg: 0px 10px 20px -5px hsl(220 15% 15% / 0.12), 0px 8px 16px -6px hsl(220 15% 15% / 0.10);\n  --shadow-xl: 0px 20px 30px -10px hsl(220 15% 15% / 0.15), 0px 12px 24px -8px hsl(220 15% 15% / 0.12);\n  --shadow-2xl: 0px 25px 40px -15px hsl(220 15% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 10%;\n\n  --foreground: 220 15% 95%;\n\n  --border: 220 15% 22%;\n\n  --card: 220 15% 14%;\n\n  --card-foreground: 220 15% 95%;\n\n  --card-border: 220 15% 18%;\n\n  --sidebar: 220 15% 16%;\n\n  --sidebar-foreground: 220 15% 95%;\n\n  --sidebar-border: 220 15% 22%;\n\n  --sidebar-primary: 220 90% 55%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 15% 20%;\n\n  --sidebar-accent-foreground: 220 15% 95%;\n\n  --sidebar-ring: 220 90% 55%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 220 15% 95%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 220 90% 55%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 15% 22%;\n\n  --secondary-foreground: 220 15% 95%;\n\n  --muted: 220 12% 20%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 220 18% 19%;\n\n  --accent-foreground: 220 15% 92%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 35%;\n  --ring: 220 90% 55%;\n  --chart-1: 220 90% 65%;\n  --chart-2: 199 89% 68%;\n  --chart-3: 142 76% 56%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 0 72% 61%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 5% / 0.35), 0px 1px 2px -1px hsl(220 15% 5% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 5% / 0.45), 0px 2px 4px -2px hsl(220 15% 5% / 0.40);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 5% / 0.50), 0px 3px 6px -3px hsl(220 15% 5% / 0.45);\n  --shadow-lg: 0px 10px 20px -5px hsl(220 15% 5% / 0.55), 0px 8px 16px -6px hsl(220 15% 5% / 0.50);\n  --shadow-xl: 0px 20px 30px -10px hsl(220 15% 5% / 0.60), 0px 12px 24px -8px hsl(220 15% 5% / 0.55);\n  --shadow-2xl: 0px 25px 40px -15px hsl(220 15% 5% / 0.70);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground relative;\n    font-size: 19px;\n    background-image: url(\"attached_assets/header site_1759436834395.png\");\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n    background-blend-mode: soft-light;\n  }\n  \n  body::before {\n    content: \"\";\n    position: fixed;\n    inset: 0;\n    background: hsl(var(--background) / 0.92);\n    z-index: -1;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10899},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import { LayoutDashboard, Calendar, Star, BarChart3, Settings, UtensilsCrossed } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Panou de Control\",\n    url: \"/\",\n    icon: LayoutDashboard,\n    testId: \"link-dashboard\",\n  },\n  {\n    title: \"Rezervări\",\n    url: \"/bookings\",\n    icon: Calendar,\n    testId: \"link-bookings\",\n  },\n  {\n    title: \"Recenzii\",\n    url: \"/reviews\",\n    icon: Star,\n    testId: \"link-reviews\",\n  },\n  {\n    title: \"Camere\",\n    url: \"/rooms\",\n    icon: () => <span>🏨</span>,\n    testId: \"link-rooms\",\n  },\n  {\n    title: \"Mese & Meniuri\",\n    url: \"/meals\",\n    icon: UtensilsCrossed,\n    testId: \"link-meals\",\n  },\n  {\n    title: \"Analize\",\n    url: \"/analytics\",\n    icon: BarChart3,\n    testId: \"link-analytics\",\n  },\n  {\n    title: \"Setări\",\n    url: \"/settings\",\n    icon: Settings,\n    testId: \"link-settings\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <img \n            src=\"/attached_assets/logo bokkerino_1759435973381.png\" \n            alt=\"BOOKERINO Logo\" \n            className=\"h-8 w-8 rounded-md object-contain\"\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = 'none';\n            }}\n          />\n          <span className=\"text-lg font-semibold\">BOOKERINO</span>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Administrare</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={item.testId}>\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":2443},"client/src/components/booking-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, User, MoreVertical, Edit, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface BookingCardProps {\n  id: string;\n  guestName: string;\n  guestEmail: string;\n  roomName: string;\n  checkIn: Date;\n  checkOut: Date;\n  status: \"pending\" | \"confirmed\" | \"checked-in\" | \"checked-out\" | \"cancelled\";\n  totalPrice: string;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nconst statusConfig = {\n  pending: { label: \"În așteptare\", variant: \"secondary\" as const },\n  confirmed: { label: \"Confirmat\", variant: \"default\" as const },\n  \"checked-in\": { label: \"Check-in Efectuat\", variant: \"secondary\" as const },\n  \"checked-out\": { label: \"Check-out Efectuat\", variant: \"outline\" as const },\n  cancelled: { label: \"Anulat\", variant: \"destructive\" as const },\n};\n\nexport function BookingCard({\n  id,\n  guestName,\n  guestEmail,\n  roomName,\n  checkIn,\n  checkOut,\n  status,\n  totalPrice,\n  onEdit,\n  onDelete,\n}: BookingCardProps) {\n  const statusInfo = statusConfig[status];\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-booking-${id}`}>\n      <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <h3 className=\"font-semibold truncate\" data-testid={`text-guest-name-${id}`}>{guestName}</h3>\n            <Badge variant={statusInfo.variant} data-testid={`badge-status-${id}`}>\n              {statusInfo.label}\n            </Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground truncate\">{roomName}</p>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${id}`}>\n              <MoreVertical className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={onEdit} data-testid={`menu-edit-${id}`}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Editează\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              onClick={onDelete} \n              className=\"text-destructive\"\n              data-testid={`menu-delete-${id}`}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Șterge\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center gap-2 text-sm\">\n          <User className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground truncate\">{guestEmail}</span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm\">\n          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground\">\n            {format(checkIn, \"MMM d\")} - {format(checkOut, \"MMM d, yyyy\")}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between pt-2 border-t\">\n          <span className=\"text-lg font-semibold\" data-testid={`text-price-${id}`}>{totalPrice} RON</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3535},"client/src/components/booking-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertBookingSchema, type Booking, type InsertBooking, type Room } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface BookingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  booking?: Booking;\n}\n\nexport function BookingDialog({ open, onOpenChange, booking }: BookingDialogProps) {\n  const { toast } = useToast();\n  const isEdit = !!booking;\n\n  const { data: rooms } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const form = useForm<InsertBooking>({\n    resolver: zodResolver(insertBookingSchema),\n    defaultValues: {\n      guestName: \"\",\n      guestEmail: \"\",\n      roomId: \"\",\n      checkIn: new Date(),\n      checkOut: new Date(Date.now() + 24 * 60 * 60 * 1000),\n      status: \"pending\",\n      totalPrice: \"0\",\n      source: \"direct\",\n    },\n  });\n\n  useEffect(() => {\n    if (open) {\n      if (booking) {\n        form.reset({\n          guestName: booking.guestName,\n          guestEmail: booking.guestEmail,\n          roomId: booking.roomId,\n          checkIn: new Date(booking.checkIn),\n          checkOut: new Date(booking.checkOut),\n          status: booking.status,\n          totalPrice: booking.totalPrice,\n          source: booking.source || \"direct\",\n        });\n      } else {\n        form.reset({\n          guestName: \"\",\n          guestEmail: \"\",\n          roomId: \"\",\n          checkIn: new Date(),\n          checkOut: new Date(Date.now() + 24 * 60 * 60 * 1000),\n          status: \"pending\",\n          totalPrice: \"0\",\n          source: \"direct\",\n        });\n      }\n    }\n  }, [open, booking, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertBooking) => apiRequest(\"POST\", \"/api/bookings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Rezervarea a fost creată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut crea rezervarea\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertBooking) =>\n      apiRequest(\"PATCH\", `/api/bookings/${booking?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Rezervarea a fost actualizată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut actualiza rezervarea\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertBooking) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-booking\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEdit ? \"Editează Rezervarea\" : \"Rezervare Nouă\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEdit\n              ? \"Modifică detaliile rezervării\"\n              : \"Completează informațiile pentru noua rezervare\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"guestName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nume Oaspete</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"ex: Ion Popescu\"\n                        data-testid=\"input-guest-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"guestEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Oaspete</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"ex: ion@example.com\"\n                        data-testid=\"input-guest-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"roomId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cameră</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-room\">\n                        <SelectValue placeholder=\"Selectează camera\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {rooms\n                        ?.filter(r => r.status === 'available' || r.id === booking?.roomId)\n                        .map((room) => (\n                        <SelectItem key={room.id} value={room.id}>\n                          {room.name} - {room.price} RON/noapte\n                          {room.status !== 'available' && ' (Ocupată)'}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"checkIn\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Check-in</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"justify-start text-left font-normal\"\n                            data-testid=\"button-check-in\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? format(field.value, \"PPP\") : \"Selectează data\"}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          disabled={(date) => date < new Date()}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"checkOut\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Check-out</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"justify-start text-left font-normal\"\n                            data-testid=\"button-check-out\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? format(field.value, \"PPP\") : \"Selectează data\"}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          disabled={(date) => date < new Date()}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"totalPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Preț Total (RON)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        data-testid=\"input-total-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-booking-status\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">În Așteptare</SelectItem>\n                        <SelectItem value=\"confirmed\">Confirmată</SelectItem>\n                        <SelectItem value=\"checked-in\">Check-in Efectuat</SelectItem>\n                        <SelectItem value=\"checked-out\">Check-out Efectuat</SelectItem>\n                        <SelectItem value=\"cancelled\">Anulată</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"source\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Sursă Rezervare</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-booking-source\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"direct\">Direct</SelectItem>\n                      <SelectItem value=\"booking.com\">Booking.com</SelectItem>\n                      <SelectItem value=\"airbnb\">Airbnb</SelectItem>\n                      <SelectItem value=\"expedia\">Expedia</SelectItem>\n                      <SelectItem value=\"phone\">Telefon</SelectItem>\n                      <SelectItem value=\"email\">Email</SelectItem>\n                      <SelectItem value=\"other\">Altele</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                disabled={isPending}\n                data-testid=\"button-cancel\"\n              >\n                Anulează\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isPending}\n                data-testid=\"button-save-booking\"\n              >\n                {isPending ? \"Se salvează...\" : isEdit ? \"Salvează\" : \"Creează\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13707},"client/src/components/review-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, MoreVertical, MessageSquare, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface ReviewCardProps {\n  id: string;\n  guestName: string;\n  rating: number;\n  comment: string;\n  response?: string | null;\n  createdAt: Date;\n  onRespond?: () => void;\n  onDelete?: () => void;\n}\n\nexport function ReviewCard({\n  id,\n  guestName,\n  rating,\n  comment,\n  response,\n  createdAt,\n  onRespond,\n  onDelete,\n}: ReviewCardProps) {\n  return (\n    <Card data-testid={`card-review-${id}`}>\n      <CardHeader className=\"space-y-2\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold\" data-testid={`text-guest-${id}`}>{guestName}</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {format(createdAt, \"MMM d, yyyy\")}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-1\" data-testid={`rating-${id}`}>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <Star\n                  key={i}\n                  className={`h-4 w-4 ${\n                    i < rating\n                      ? \"fill-chart-4 text-chart-4\"\n                      : \"fill-muted text-muted\"\n                  }`}\n                />\n              ))}\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${id}`}>\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={onRespond} data-testid={`menu-respond-${id}`}>\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  {response ? \"Editează răspunsul\" : \"Răspunde\"}\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={onDelete} \n                  className=\"text-destructive\"\n                  data-testid={`menu-delete-${id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Șterge\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <p className=\"text-sm\" data-testid={`text-comment-${id}`}>{comment}</p>\n\n        {response && (\n          <div className=\"rounded-md bg-muted p-3 mt-3\">\n            <p className=\"text-sm font-medium mb-1\">Răspunsul tău</p>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-response-${id}`}>{response}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3083},"client/src/components/review-response-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { type Review } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { z } from \"zod\";\n\nconst responseSchema = z.object({\n  response: z.string().min(1, \"Răspunsul este obligatoriu\"),\n});\n\ntype ResponseFormData = z.infer<typeof responseSchema>;\n\ninterface ReviewResponseDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  review?: Review;\n}\n\nexport function ReviewResponseDialog({ open, onOpenChange, review }: ReviewResponseDialogProps) {\n  const { toast } = useToast();\n\n  const form = useForm<ResponseFormData>({\n    resolver: zodResolver(responseSchema),\n    defaultValues: {\n      response: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (open && review) {\n      form.reset({\n        response: review.response || \"\",\n      });\n    }\n  }, [open, review, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: (data: ResponseFormData) =>\n      apiRequest(\"PATCH\", `/api/reviews/${review?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Răspunsul a fost salvat cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut salva răspunsul\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ResponseFormData) => {\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-review-response\">\n        <DialogHeader>\n          <DialogTitle>Răspunde la recenzie</DialogTitle>\n          <DialogDescription>\n            Răspunde la recenzia de la {review?.guestName}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"response\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Răspunsul tău</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Scrie un răspuns la recenzie...\"\n                      className=\"min-h-[120px]\"\n                      data-testid=\"textarea-response\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                disabled={updateMutation.isPending}\n                data-testid=\"button-cancel\"\n              >\n                Anulează\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save-response\"\n              >\n                {updateMutation.isPending ? \"Se salvează...\" : \"Salvează răspunsul\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3857},"client/src/components/room-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, DollarSign, Edit, Trash2 } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical } from \"lucide-react\";\n\ninterface RoomCardProps {\n  id: string;\n  name: string;\n  type: string;\n  capacity: number;\n  price: string;\n  status: \"available\" | \"occupied\" | \"maintenance\";\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nconst statusConfig = {\n  available: { label: \"Disponibilă\", variant: \"default\" as const },\n  occupied: { label: \"Ocupată\", variant: \"secondary\" as const },\n  maintenance: { label: \"Întreținere\", variant: \"destructive\" as const },\n};\n\nexport function RoomCard({ id, name, type, capacity, price, status, onEdit, onDelete }: RoomCardProps) {\n  const statusInfo = statusConfig[status];\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-room-${id}`}>\n      <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"font-semibold\" data-testid={`text-room-name-${id}`}>{name}</h3>\n          <p className=\"text-sm text-muted-foreground\">{type}</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={statusInfo.variant} data-testid={`badge-status-${id}`}>\n            {statusInfo.label}\n          </Badge>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${id}`}>\n                <MoreVertical className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={onEdit} data-testid={`menu-edit-${id}`}>\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Editează\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={onDelete} \n                className=\"text-destructive\"\n                data-testid={`menu-delete-${id}`}\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Șterge\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Users className=\"h-4 w-4\" />\n            <span>{capacity} Oaspeți</span>\n          </div>\n          <div className=\"flex items-center gap-1 font-semibold\" data-testid={`text-price-${id}`}>\n            <DollarSign className=\"h-4 w-4\" />\n            <span>{price}/noapte</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3006},"client/src/components/room-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertRoomSchema, type Room, type InsertRoom } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect, useMemo } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface RoomDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  room?: Room;\n}\n\nexport function RoomDialog({ open, onOpenChange, room }: RoomDialogProps) {\n  const { toast } = useToast();\n  const isEdit = !!room;\n\n  const { data: rooms = [] } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const uniqueRoomTypes = useMemo(() => {\n    const types = new Set(rooms.map(r => r.type).filter(Boolean));\n    return Array.from(types).sort();\n  }, [rooms]);\n\n  const form = useForm<InsertRoom>({\n    resolver: zodResolver(insertRoomSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"\",\n      capacity: 1,\n      price: \"0\",\n      status: \"available\",\n    },\n  });\n\n  useEffect(() => {\n    if (open) {\n      if (room) {\n        form.reset({\n          name: room.name,\n          type: room.type,\n          capacity: room.capacity,\n          price: room.price,\n          status: room.status,\n        });\n      } else {\n        form.reset({\n          name: \"\",\n          type: \"\",\n          capacity: 1,\n          price: \"0\",\n          status: \"available\",\n        });\n      }\n    }\n  }, [open, room, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertRoom) => apiRequest(\"POST\", \"/api/rooms\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Camera a fost adăugată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut adăuga camera\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertRoom) =>\n      apiRequest(\"PATCH\", `/api/rooms/${room?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Camera a fost actualizată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut actualiza camera\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertRoom) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-room\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEdit ? \"Editează Camera\" : \"Adaugă Cameră Nouă\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEdit\n              ? \"Modifică detaliile camerei\"\n              : \"Completează informațiile pentru noua cameră\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nume Cameră</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"ex: Deluxe Suite 301\"\n                      data-testid=\"input-room-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tip Cameră</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        list=\"room-types\"\n                        placeholder=\"Introduceți tipul (ex: Cameră dublă standard)\"\n                        data-testid=\"input-room-type\"\n                      />\n                      <datalist id=\"room-types\">\n                        {uniqueRoomTypes.map((type) => (\n                          <option key={type} value={type} />\n                        ))}\n                      </datalist>\n                    </div>\n                  </FormControl>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Introduceți exact tipul camerei de pe Booking.com sau alegeți din sugestii\n                  </p>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"capacity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Capacitate</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"1\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        data-testid=\"input-room-capacity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Preț/Noapte (RON)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        data-testid=\"input-room-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-room-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"available\">Disponibilă</SelectItem>\n                      <SelectItem value=\"occupied\">Ocupată</SelectItem>\n                      <SelectItem value=\"maintenance\">Întreținere</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                disabled={isPending}\n                data-testid=\"button-cancel\"\n              >\n                Anulează\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isPending}\n                data-testid=\"button-save-room\"\n              >\n                {isPending ? \"Se salvează...\" : isEdit ? \"Salvează\" : \"Adaugă\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8619},"client/src/components/stat-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  icon: LucideIcon;\n  trend?: \"up\" | \"down\";\n}\n\nexport function StatCard({ title, value, change, icon: Icon, trend }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">{title}</h3>\n        <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-muted\">\n          <Icon className=\"h-4 w-4 text-muted-foreground\" />\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`stat-${title.toLowerCase().replace(/\\s+/g, '-')}`}>{value}</div>\n        {change && (\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            <span className={trend === \"up\" ? \"text-chart-3\" : trend === \"down\" ? \"text-chart-5\" : \"\"}>\n              {change}\n            </span>{\" \"}\n            vs last week\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1184},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1117},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":666},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from \"recharts\";\n\nexport default function Analytics() {\n  const revenueData = [\n    { month: \"Ian\", revenue: 32000 },\n    { month: \"Feb\", revenue: 38000 },\n    { month: \"Mar\", revenue: 42000 },\n    { month: \"Apr\", revenue: 45000 },\n    { month: \"Mai\", revenue: 48000 },\n    { month: \"Iun\", revenue: 52000 },\n  ];\n\n  const occupancyData = [\n    { month: \"Ian\", rate: 65 },\n    { month: \"Feb\", rate: 72 },\n    { month: \"Mar\", rate: 78 },\n    { month: \"Apr\", rate: 75 },\n    { month: \"Mai\", rate: 82 },\n    { month: \"Iun\", rate: 85 },\n  ];\n\n  const bookingSources = [\n    { source: \"Direct\", bookings: 45 },\n    { source: \"Booking.com\", bookings: 62 },\n    { source: \"Expedia\", bookings: 38 },\n    { source: \"Airbnb\", bookings: 28 },\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Analize</h1>\n            <p className=\"text-muted-foreground\">Urmărește performanța și informațiile hotelului tău</p>\n          </div>\n          <Select defaultValue=\"6months\">\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-time-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1month\">Ultima Lună</SelectItem>\n              <SelectItem value=\"3months\">Ultimele 3 Luni</SelectItem>\n              <SelectItem value=\"6months\">Ultimele 6 Luni</SelectItem>\n              <SelectItem value=\"1year\">Ultimul An</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Tendința Veniturilor</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis dataKey=\"month\" stroke=\"hsl(var(--muted-foreground))\" />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--card))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"revenue\"\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={2}\n                    dot={{ fill: \"hsl(var(--primary))\" }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Rata de Ocupare</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={occupancyData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis dataKey=\"month\" stroke=\"hsl(var(--muted-foreground))\" />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--card))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"rate\"\n                    stroke=\"hsl(var(--chart-2))\"\n                    strokeWidth={2}\n                    dot={{ fill: \"hsl(var(--chart-2))\" }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className=\"md:col-span-2\">\n            <CardHeader>\n              <CardTitle>Surse de Rezervare</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={bookingSources}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis dataKey=\"source\" stroke=\"hsl(var(--muted-foreground))\" />\n                  <YAxis stroke=\"hsl(var(--muted-foreground))\" />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--card))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"6px\",\n                    }}\n                  />\n                  <Bar dataKey=\"bookings\" fill=\"hsl(var(--chart-3))\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5346},"client/src/pages/bookings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { type Booking, type Room } from \"@shared/schema\";\nimport { BookingCard } from \"@/components/booking-card\";\nimport { BookingDialog } from \"@/components/booking-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Bookings() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingBooking, setEditingBooking] = useState<Booking | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const { data: rooms } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/bookings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Rezervarea a fost ștearsă cu succes\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut șterge rezervarea\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (booking: Booking) => {\n    setEditingBooking(booking);\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Sigur vrei să ștergi această rezervare?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingBooking(undefined);\n    setDialogOpen(true);\n  };\n\n  const getRoomName = (roomId: string) => {\n    return rooms?.find((r) => r.id === roomId)?.name || \"Camera necunoscută\";\n  };\n\n  const filteredBookings = bookings?.filter((booking) => {\n    const roomName = getRoomName(booking.roomId);\n    const matchesSearch =\n      searchQuery === \"\" ||\n      booking.guestName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.guestEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      roomName.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const matchesStatus = statusFilter === \"all\" || booking.status === statusFilter;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Rezervări</h1>\n            <p className=\"text-muted-foreground\">Gestionează rezervările hotelului tău</p>\n          </div>\n          <Button onClick={handleAddNew} data-testid=\"button-new-booking\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Rezervare Nouă\n          </Button>\n        </div>\n\n        <div className=\"flex items-center gap-3 flex-wrap\">\n          <div className=\"relative flex-1 min-w-[200px]\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Caută rezervări...\"\n              className=\"pl-9\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-bookings\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[160px]\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Selectează status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Toate Statusurile</SelectItem>\n              <SelectItem value=\"pending\">În Așteptare</SelectItem>\n              <SelectItem value=\"confirmed\">Confirmată</SelectItem>\n              <SelectItem value=\"checked-in\">Check-in Efectuat</SelectItem>\n              <SelectItem value=\"checked-out\">Check-out Efectuat</SelectItem>\n              <SelectItem value=\"cancelled\">Anulată</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {bookingsLoading ? (\n          <div className=\"space-y-3\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-[150px] rounded-lg\" data-testid={`skeleton-booking-${i}`} />\n            ))}\n          </div>\n        ) : filteredBookings && filteredBookings.length > 0 ? (\n          <div className=\"space-y-3\">\n            {filteredBookings.map((booking) => (\n              <BookingCard\n                key={booking.id}\n                id={booking.id}\n                guestName={booking.guestName}\n                guestEmail={booking.guestEmail}\n                roomName={getRoomName(booking.roomId)}\n                checkIn={new Date(booking.checkIn)}\n                checkOut={new Date(booking.checkOut)}\n                status={booking.status as \"pending\" | \"confirmed\" | \"checked-in\" | \"checked-out\" | \"cancelled\"}\n                totalPrice={booking.totalPrice}\n                onEdit={() => handleEdit(booking)}\n                onDelete={() => handleDelete(booking.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"text-no-bookings\">\n            <p className=\"text-muted-foreground\">\n              {searchQuery || statusFilter !== \"all\"\n                ? \"Nu s-au găsit rezervări care să corespundă filtrelor\"\n                : \"Nu există rezervări încă. Creează prima rezervare pentru a începe.\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      <BookingDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        booking={editingBooking}\n      />\n    </div>\n  );\n}","size_bytes":6211},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type Room, type Booking, type Review } from \"@shared/schema\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { BookingCard } from \"@/components/booking-card\";\nimport { Calendar, DollarSign, Hotel, Star, TrendingUp, Percent } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\nimport { LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\ninterface AdvancedAnalytics {\n  revenueTrend: { month: string; revenue: number }[];\n  occupancyRate: number;\n  bookingSources: { name: string; value: number }[];\n}\n\nexport default function Dashboard() {\n  const { data: rooms, isLoading: roomsLoading } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const { data: reviews, isLoading: reviewsLoading } = useQuery<Review[]>({\n    queryKey: [\"/api/reviews\"],\n  });\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<AdvancedAnalytics>({\n    queryKey: [\"/api/analytics/advanced\"],\n  });\n\n  const isLoading = roomsLoading || bookingsLoading || reviewsLoading || analyticsLoading;\n\n  const roomsList = rooms ?? [];\n  const bookingsList = bookings ?? [];\n  const reviewsList = reviews ?? [];\n\n  const getRoomName = (roomId: string) => {\n    return roomsList.find((r) => r.id === roomId)?.name || \"Camera necunoscută\";\n  };\n\n  const stats = {\n    totalBookings: bookingsList.length,\n    availableRooms: roomsList.filter((r) => r.status === \"available\").length,\n    totalRooms: roomsList.length,\n    revenue: bookingsList\n      .reduce((sum, b) => {\n        const price = parseFloat(b.totalPrice || \"0\");\n        return sum + (Number.isFinite(price) ? price : 0);\n      }, 0)\n      .toFixed(2),\n    averageRating: reviewsList.length > 0\n      ? (reviewsList.reduce((sum, r) => sum + (r.rating || 0), 0) / reviewsList.length).toFixed(1)\n      : \"0.0\",\n    totalReviews: reviewsList.length,\n  };\n\n  const recentBookings = [...bookingsList]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  const recentReviews = [...reviewsList]\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Panou de Control</h1>\n          <p className=\"text-muted-foreground\">Bine ai venit la sistemul de management hotelier</p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {isLoading ? (\n            <>\n              <Skeleton className=\"h-[120px]\" data-testid=\"skeleton-stat-0\" />\n              <Skeleton className=\"h-[120px]\" data-testid=\"skeleton-stat-1\" />\n              <Skeleton className=\"h-[120px]\" data-testid=\"skeleton-stat-2\" />\n              <Skeleton className=\"h-[120px]\" data-testid=\"skeleton-stat-3\" />\n            </>\n          ) : (\n            <>\n              <StatCard\n                title=\"Total Rezervări\"\n                value={stats.totalBookings}\n                change={`${stats.totalBookings} rezervări active`}\n                icon={Calendar}\n              />\n              <StatCard\n                title=\"Camere Disponibile\"\n                value={stats.availableRooms}\n                change={`Din ${stats.totalRooms} camere totale`}\n                icon={Hotel}\n              />\n              <StatCard\n                title=\"Venit Total\"\n                value={`${stats.revenue} RON`}\n                change=\"Din toate rezervările\"\n                icon={DollarSign}\n              />\n              <StatCard\n                title=\"Rating Mediu\"\n                value={stats.averageRating}\n                change={`Pe baza a ${stats.totalReviews} recenzii`}\n                icon={Star}\n              />\n            </>\n          )}\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Tendință Venituri\n              </CardTitle>\n              <CardDescription>Evoluția veniturilor în ultimele 6 luni</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {analyticsLoading ? (\n                <Skeleton className=\"h-[300px]\" data-testid=\"skeleton-revenue-chart\" />\n              ) : analytics?.revenueTrend && analytics.revenueTrend.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={analytics.revenueTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"hsl(var(--primary))\" \n                      strokeWidth={2}\n                      name=\"Venit (RON)\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-16\">\n                  Nu există date disponibile\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Percent className=\"h-5 w-5\" />\n                  Rată Ocupare\n                </CardTitle>\n                <CardDescription>Camere ocupate astăzi</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analyticsLoading ? (\n                  <Skeleton className=\"h-[80px]\" data-testid=\"skeleton-occupancy\" />\n                ) : (\n                  <div className=\"text-center\">\n                    <p className=\"text-4xl font-bold\" data-testid=\"text-occupancy-rate\">\n                      {analytics?.occupancyRate || 0}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Ocupare actuală\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Surse Rezervări</CardTitle>\n                <CardDescription>Distribuție pe surse</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analyticsLoading ? (\n                  <Skeleton className=\"h-[200px]\" data-testid=\"skeleton-sources-chart\" />\n                ) : analytics?.bookingSources && analytics.bookingSources.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <PieChart>\n                      <Pie\n                        data={analytics.bookingSources}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"hsl(var(--primary))\"\n                        dataKey=\"value\"\n                      >\n                        {analytics.bookingSources.map((entry, index) => (\n                          <Cell \n                            key={`cell-${index}`} \n                            fill={`hsl(var(--chart-${(index % 5) + 1}))`} \n                          />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">\n                    Nu există rezervări\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          <div className=\"lg:col-span-2 space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Rezervări Recente</CardTitle>\n                <CardDescription>Ultimele tale rezervări</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {bookingsLoading ? (\n                  <>\n                    <Skeleton className=\"h-[150px]\" data-testid=\"skeleton-booking-0\" />\n                    <Skeleton className=\"h-[150px]\" data-testid=\"skeleton-booking-1\" />\n                    <Skeleton className=\"h-[150px]\" data-testid=\"skeleton-booking-2\" />\n                  </>\n                ) : recentBookings.length > 0 ? (\n                  recentBookings.map((booking) => (\n                    <BookingCard\n                      key={booking.id}\n                      id={booking.id}\n                      guestName={booking.guestName}\n                      guestEmail={booking.guestEmail}\n                      roomName={getRoomName(booking.roomId)}\n                      checkIn={new Date(booking.checkIn)}\n                      checkOut={new Date(booking.checkOut)}\n                      status={booking.status as \"pending\" | \"confirmed\" | \"checked-in\" | \"checked-out\" | \"cancelled\"}\n                      totalPrice={booking.totalPrice}\n                    />\n                  ))\n                ) : (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\" data-testid=\"text-no-bookings\">\n                    Nu există rezervări încă\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recenzii Recente</CardTitle>\n              <CardDescription>Ultimele feedback-uri de la oaspeți</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {reviewsLoading ? (\n                <>\n                  <Skeleton className=\"h-[60px]\" data-testid=\"skeleton-review-0\" />\n                  <Skeleton className=\"h-[60px]\" data-testid=\"skeleton-review-1\" />\n                  <Skeleton className=\"h-[60px]\" data-testid=\"skeleton-review-2\" />\n                </>\n              ) : recentReviews.length > 0 ? (\n                recentReviews.map((review) => {\n                  const reviewDate = review.createdAt ? new Date(review.createdAt) : new Date();\n                  return (\n                    <div\n                      key={review.id}\n                      className=\"flex items-center justify-between pb-3 border-b last:border-0\"\n                      data-testid={`review-item-${review.id}`}\n                    >\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium truncate\">{review.guestName}</p>\n                        <div className=\"flex items-center gap-1 mt-1\">\n                          {Array.from({ length: 5 }).map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-3 w-3 ${\n                                i < (review.rating || 0)\n                                  ? \"fill-chart-4 text-chart-4\"\n                                  : \"fill-muted text-muted\"\n                              }`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(reviewDate, \"MMM d\")}\n                      </p>\n                    </div>\n                  );\n                })\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-8\" data-testid=\"text-no-reviews\">\n                  Nu există recenzii încă\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12391},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, Star, BarChart3, Shield, Zap } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      <div \n        className=\"fixed inset-0 z-0 opacity-10\"\n        style={{\n          backgroundImage: 'url(\"attached_assets/header site_1759436834395.png\")',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat'\n        }}\n      />\n      <header className=\"border-b relative z-10\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <img\n              src=\"attached_assets/logo bokkerino_1759435973381.png\"\n              alt=\"Bookerino Logo\"\n              className=\"h-8 w-8 rounded-md object-contain\"\n            />\n            <span className=\"text-xl font-bold\">BOOKERINO</span>\n          </div>\n          <Button onClick={handleLogin} data-testid=\"button-login\">\n            Autentificare\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"flex-1 relative z-10\">\n        <section className=\"container mx-auto px-4 py-20 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">\n            Automatizează Managementul Hotelului\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Eficientizează rezervările, gestionează recenziile și urmărește analitice într-o singură platformă puternică. Construit pentru hotelierii moderni.\n          </p>\n          <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-get-started\">\n            Începe Acum\n          </Button>\n        </section>\n\n        <section className=\"bg-muted/50 py-20\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Tot ce ai nevoie pentru a-ți conduce hotelul\n            </h2>\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <Calendar className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Gestionarea Rezervărilor</h3>\n                  <p className=\"text-muted-foreground\">\n                    Urmărește și gestionează toate rezervările într-un singur loc cu actualizări în timp real.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <Star className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Gestionarea Recenziilor</h3>\n                  <p className=\"text-muted-foreground\">\n                    Monitorizează și răspunde la recenziile oaspeților pentru a-ți menține reputația.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <img\n                      src=\"attached_assets/logo bokkerino_1759435973381.png\"\n                      alt=\"Bookerino Logo\"\n                      className=\"h-full w-full object-contain\"\n                    />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Inventarul Camerelor</h3>\n                  <p className=\"text-muted-foreground\">\n                    Ține evidența disponibilității camerelor, prețurilor și programului de întreținere.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <BarChart3 className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Panou de Analiză</h3>\n                  <p className=\"text-muted-foreground\">\n                    Ia decizii bazate pe date cu analize și rapoarte complete.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <Zap className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Automatizare</h3>\n                  <p className=\"text-muted-foreground\">\n                    Automatizează sarcinile repetitive și concentrează-te pe oferirea de experiențe excelente oaspeților.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 mb-4\">\n                    <Shield className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Sigur și Fiabil</h3>\n                  <p className=\"text-muted-foreground\">\n                    Datele tale sunt protejate cu măsuri de securitate de nivel enterprise.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"container mx-auto px-4 py-20 text-center\">\n          <h2 className=\"text-3xl font-bold mb-6\">\n            Gata să îți transformi operațiunile hotelului?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Alătură-te miilor de hotelieri care folosesc deja BOOKERINO\n          </p>\n          <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-start-free\">\n            Începe Perioada Gratuită\n          </Button>\n        </section>\n      </main>\n\n      <footer className=\"border-t relative z-10\">\n        <div className=\"container mx-auto px-4 py-6 text-center text-sm text-muted-foreground\">\n          © 2024 BOOKERINO. Toate drepturile rezervate.\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":6780},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reviews.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { type Review } from \"@shared/schema\";\nimport { ReviewCard } from \"@/components/review-card\";\nimport { ReviewResponseDialog } from \"@/components/review-response-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Star } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Reviews() {\n  const [responseDialogOpen, setResponseDialogOpen] = useState(false);\n  const [selectedReview, setSelectedReview] = useState<Review | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [ratingFilter, setRatingFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const { data: reviews, isLoading } = useQuery<Review[]>({\n    queryKey: [\"/api/reviews\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/reviews/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Recenzia a fost ștearsă cu succes\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut șterge recenzia\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRespond = (review: Review) => {\n    setSelectedReview(review);\n    setResponseDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Sigur vrei să ștergi această recenzie?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const filteredReviews = reviews?.filter((review) => {\n    const matchesSearch =\n      searchQuery === \"\" ||\n      review.guestName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      review.comment.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const matchesRating =\n      ratingFilter === \"all\" || review.rating.toString() === ratingFilter;\n\n    return matchesSearch && matchesRating;\n  });\n\n  const averageRating = reviews && reviews.length > 0\n    ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1)\n    : \"0.0\";\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Recenzii</h1>\n            <p className=\"text-muted-foreground\">Monitorizează și răspunde la feedback-ul oaspeților</p>\n          </div>\n          <div className=\"flex items-center gap-2 bg-card px-4 py-2 rounded-lg border\">\n            <Star className=\"h-5 w-5 fill-chart-4 text-chart-4\" />\n            <span className=\"text-2xl font-bold\" data-testid=\"text-average-rating\">{averageRating}</span>\n            <span className=\"text-sm text-muted-foreground\">( {reviews?.length || 0} recenzii )</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-3 flex-wrap\">\n          <div className=\"relative flex-1 min-w-[200px]\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Caută recenzii...\"\n              className=\"pl-9\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-reviews\"\n            />\n          </div>\n          <Select value={ratingFilter} onValueChange={setRatingFilter}>\n            <SelectTrigger className=\"w-[160px]\" data-testid=\"select-rating-filter\">\n              <SelectValue placeholder=\"Selectează rating\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Toate ratingurile</SelectItem>\n              <SelectItem value=\"5\">5 Stele</SelectItem>\n              <SelectItem value=\"4\">4 Stele</SelectItem>\n              <SelectItem value=\"3\">3 Stele</SelectItem>\n              <SelectItem value=\"2\">2 Stele</SelectItem>\n              <SelectItem value=\"1\">1 Stea</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2 xl:grid-cols-3\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-[250px] rounded-lg\" data-testid={`skeleton-review-${i}`} />\n            ))}\n          </div>\n        ) : filteredReviews && filteredReviews.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2 xl:grid-cols-3\">\n            {filteredReviews.map((review) => (\n              <ReviewCard\n                key={review.id}\n                id={review.id}\n                guestName={review.guestName}\n                rating={review.rating}\n                comment={review.comment}\n                response={review.response}\n                createdAt={new Date(review.createdAt)}\n                onRespond={() => handleRespond(review)}\n                onDelete={() => handleDelete(review.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"text-no-reviews\">\n            <p className=\"text-muted-foreground\">\n              {searchQuery || ratingFilter !== \"all\"\n                ? \"Nu s-au găsit recenzii care să corespundă filtrelor\"\n                : \"Nu există recenzii încă.\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      <ReviewResponseDialog\n        open={responseDialogOpen}\n        onOpenChange={setResponseDialogOpen}\n        review={selectedReview}\n      />\n    </div>\n  );\n}","size_bytes":5871},"client/src/pages/rooms.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { type Room } from \"@shared/schema\";\nimport { RoomCard } from \"@/components/room-card\";\nimport { RoomDialog } from \"@/components/room-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Rooms() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingRoom, setEditingRoom] = useState<Room | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  const { data: rooms, isLoading } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/rooms/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Camera a fost ștearsă cu succes\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut șterge camera\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (room: Room) => {\n    setEditingRoom(room);\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Sigur vrei să ștergi această cameră?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingRoom(undefined);\n    setDialogOpen(true);\n  };\n\n  const filteredRooms = rooms?.filter((room) => {\n    const matchesSearch =\n      searchQuery === \"\" ||\n      room.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      room.type.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const matchesType =\n      typeFilter === \"all\" || room.type.toLowerCase().includes(typeFilter.toLowerCase());\n\n    const matchesStatus = statusFilter === \"all\" || room.status === statusFilter;\n\n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Camere</h1>\n            <p className=\"text-muted-foreground\">Gestionează inventarul și disponibilitatea camerelor</p>\n          </div>\n          <Button onClick={handleAddNew} data-testid=\"button-add-room\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adaugă Cameră\n          </Button>\n        </div>\n\n        <div className=\"flex items-center gap-3 flex-wrap\">\n          <div className=\"relative flex-1 min-w-[200px]\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Caută camere...\"\n              className=\"pl-9\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-rooms\"\n            />\n          </div>\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-type-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Toate Tipurile</SelectItem>\n              <SelectItem value=\"standard\">Cameră Standard</SelectItem>\n              <SelectItem value=\"deluxe\">Suită Deluxe</SelectItem>\n              <SelectItem value=\"premium\">Suită Premium</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[160px]\" data-testid=\"select-status-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Toate Statusurile</SelectItem>\n              <SelectItem value=\"available\">Disponibilă</SelectItem>\n              <SelectItem value=\"occupied\">Ocupată</SelectItem>\n              <SelectItem value=\"maintenance\">Întreținere</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-[200px] rounded-lg\" data-testid={`skeleton-room-${i}`} />\n            ))}\n          </div>\n        ) : filteredRooms && filteredRooms.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n            {filteredRooms.map((room) => (\n              <RoomCard\n                key={room.id}\n                id={room.id}\n                name={room.name}\n                type={room.type}\n                capacity={room.capacity}\n                price={room.price}\n                status={room.status as \"available\" | \"occupied\" | \"maintenance\"}\n                onEdit={() => handleEdit(room)}\n                onDelete={() => handleDelete(room.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"text-no-rooms\">\n            <p className=\"text-muted-foreground\">\n              {searchQuery || typeFilter !== \"all\" || statusFilter !== \"all\"\n                ? \"Nu s-au găsit camere care să corespundă filtrelor\"\n                : \"Nu există camere încă. Adaugă prima cameră pentru a începe.\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      <RoomDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        room={editingRoom}\n      />\n    </div>\n  );\n}\n","size_bytes":6181},"client/src/components/examples/Analytics.tsx":{"content":"import Analytics from \"../../pages/analytics\";\n\nexport default function AnalyticsExample() {\n  return <Analytics />;\n}\n","size_bytes":119},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from \"../app-sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n    </SidebarProvider>\n  );\n}\n","size_bytes":235},"client/src/components/examples/BookingCard.tsx":{"content":"import { BookingCard } from \"../booking-card\";\n\nexport default function BookingCardExample() {\n  return (\n    <div className=\"p-4 max-w-md\">\n      <BookingCard\n        id=\"1\"\n        guestName=\"Sarah Johnson\"\n        guestEmail=\"sarah.j@email.com\"\n        roomName=\"Deluxe Suite 301\"\n        checkIn={new Date(\"2024-10-15\")}\n        checkOut={new Date(\"2024-10-18\")}\n        status=\"confirmed\"\n        totalPrice=\"450.00\"\n      />\n    </div>\n  );\n}\n","size_bytes":449},"client/src/components/examples/Bookings.tsx":{"content":"import Bookings from \"../../pages/bookings\";\n\nexport default function BookingsExample() {\n  return <Bookings />;\n}\n","size_bytes":115},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from \"../../pages/dashboard\";\n\nexport default function DashboardExample() {\n  return <Dashboard />;\n}\n","size_bytes":119},"client/src/components/examples/ReviewCard.tsx":{"content":"import { ReviewCard } from \"../review-card\";\n\nexport default function ReviewCardExample() {\n  return (\n    <div className=\"p-4 max-w-md\">\n      <ReviewCard\n        id=\"1\"\n        guestName=\"Sarah Johnson\"\n        rating={5}\n        comment=\"Absolutely wonderful stay! The room was spotless, staff was incredibly friendly, and the location was perfect.\"\n        response=\"Thank you for your wonderful review, Sarah!\"\n        createdAt={new Date(\"2024-09-28\")}\n      />\n    </div>\n  );\n}\n","size_bytes":486},"client/src/components/examples/Reviews.tsx":{"content":"import Reviews from \"../../pages/reviews\";\n\nexport default function ReviewsExample() {\n  return <Reviews />;\n}\n","size_bytes":111},"client/src/components/examples/RoomCard.tsx":{"content":"import { RoomCard } from \"../room-card\";\n\nexport default function RoomCardExample() {\n  return (\n    <div className=\"p-4 max-w-xs\">\n      <RoomCard\n        id=\"1\"\n        name=\"Deluxe Suite 301\"\n        type=\"Deluxe Suite\"\n        capacity={2}\n        price=\"150\"\n        status=\"available\"\n      />\n    </div>\n  );\n}\n","size_bytes":318},"client/src/components/examples/Rooms.tsx":{"content":"import Rooms from \"../../pages/rooms\";\n\nexport default function RoomsExample() {\n  return <Rooms />;\n}\n","size_bytes":103},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard } from \"../stat-card\";\nimport { Calendar } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"p-4 max-w-xs\">\n      <StatCard\n        title=\"Total Bookings\"\n        value=\"124\"\n        change=\"↑ 12%\"\n        icon={Calendar}\n        trend=\"up\"\n      />\n    </div>\n  );\n}\n","size_bytes":335},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeProvider } from \"../theme-provider\";\nimport { ThemeToggle } from \"../theme-toggle\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <ThemeToggle />\n    </ThemeProvider>\n  );\n}\n","size_bytes":227},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"src/main/java/com/bookerino/Main.java":{"content":"\npackage com.bookerino;\n\nimport com.bookerino.database.DatabaseConnection;\nimport java.sql.*;\nimport java.util.Scanner;\n\npublic class Main {\n    private static Scanner scanner = new Scanner(System.in);\n    \n    public static void main(String[] args) {\n        try {\n            // Initialize database\n            DatabaseConnection.initialize();\n            System.out.println(\"✓ Baza de date inițializată cu succes\");\n            System.out.println(\"=====================================\");\n            System.out.println(\"   Bine ați venit la BOOKERINO!\");\n            System.out.println(\"=====================================\\n\");\n            \n            boolean running = true;\n            while (running) {\n                running = showMainMenu();\n            }\n            \n            System.out.println(\"\\nLa revedere!\");\n            scanner.close();\n        } catch (Exception e) {\n            System.err.println(\"Eroare la pornirea aplicației: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n    \n    private static boolean showMainMenu() {\n        System.out.println(\"\\n=== MENIU PRINCIPAL ===\");\n        System.out.println(\"1. Gestionare Camere\");\n        System.out.println(\"2. Gestionare Rezervări\");\n        System.out.println(\"3. Gestionare Recenzii\");\n        System.out.println(\"4. Analitică\");\n        System.out.println(\"5. Ieșire\");\n        System.out.print(\"\\nAlegeți o opțiune (1-5): \");\n        \n        int choice = getIntInput();\n        System.out.println();\n        \n        switch (choice) {\n            case 1:\n                manageRooms();\n                break;\n            case 2:\n                manageBookings();\n                break;\n            case 3:\n                manageReviews();\n                break;\n            case 4:\n                showAnalytics();\n                break;\n            case 5:\n                return false;\n            default:\n                System.out.println(\"Opțiune invalidă!\");\n        }\n        return true;\n    }\n    \n    private static void manageRooms() {\n        System.out.println(\"=== GESTIONARE CAMERE ===\");\n        System.out.println(\"1. Afișare toate camerele\");\n        System.out.println(\"2. Adăugare cameră nouă\");\n        System.out.println(\"3. Înapoi\");\n        System.out.print(\"\\nAlegeți o opțiune: \");\n        \n        int choice = getIntInput();\n        \n        switch (choice) {\n            case 1:\n                displayRooms();\n                break;\n            case 2:\n                addRoom();\n                break;\n            case 3:\n                return;\n        }\n    }\n    \n    private static void displayRooms() {\n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM rooms ORDER BY room_number\");\n            \n            System.out.println(\"\\n--- LISTA CAMERE ---\");\n            System.out.printf(\"%-10s %-15s %-10s %-12s %-10s\\n\", \n                \"Nr. Cameră\", \"Tip\", \"Preț/Noapte\", \"Status\", \"Capacitate\");\n            System.out.println(\"─\".repeat(70));\n            \n            while (rs.next()) {\n                System.out.printf(\"%-10s %-15s %-10.2f RON %-12s %-10d\\n\",\n                    rs.getString(\"room_number\"),\n                    rs.getString(\"room_type\"),\n                    rs.getDouble(\"price_per_night\"),\n                    rs.getString(\"status\"),\n                    rs.getInt(\"capacity\")\n                );\n            }\n            rs.close();\n            stmt.close();\n        } catch (SQLException e) {\n            System.err.println(\"Eroare la afișarea camerelor: \" + e.getMessage());\n        }\n    }\n    \n    private static void addRoom() {\n        System.out.println(\"\\n--- ADĂUGARE CAMERĂ NOUĂ ---\");\n        System.out.print(\"Număr cameră: \");\n        String roomNumber = scanner.nextLine();\n        \n        System.out.print(\"Tip cameră (Single/Double/Suite): \");\n        String roomType = scanner.nextLine();\n        \n        System.out.print(\"Preț pe noapte (RON): \");\n        double price = getDoubleInput();\n        \n        System.out.print(\"Capacitate: \");\n        int capacity = getIntInput();\n        \n        scanner.nextLine(); // consume newline\n        \n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            PreparedStatement pstmt = conn.prepareStatement(\n                \"INSERT INTO rooms (room_number, room_type, price_per_night, capacity, status) VALUES (?, ?, ?, ?, 'available')\"\n            );\n            pstmt.setString(1, roomNumber);\n            pstmt.setString(2, roomType);\n            pstmt.setDouble(3, price);\n            pstmt.setInt(4, capacity);\n            pstmt.executeUpdate();\n            pstmt.close();\n            \n            System.out.println(\"✓ Cameră adăugată cu succes!\");\n        } catch (SQLException e) {\n            System.err.println(\"Eroare la adăugarea camerei: \" + e.getMessage());\n        }\n    }\n    \n    private static void manageBookings() {\n        System.out.println(\"=== GESTIONARE REZERVĂRI ===\");\n        System.out.println(\"1. Afișare toate rezervările\");\n        System.out.println(\"2. Adăugare rezervare nouă\");\n        System.out.println(\"3. Înapoi\");\n        System.out.print(\"\\nAlegeți o opțiune: \");\n        \n        int choice = getIntInput();\n        \n        switch (choice) {\n            case 1:\n                displayBookings();\n                break;\n            case 2:\n                addBooking();\n                break;\n            case 3:\n                return;\n        }\n    }\n    \n    private static void displayBookings() {\n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"SELECT b.*, r.room_number FROM bookings b JOIN rooms r ON b.room_id = r.id ORDER BY b.check_in DESC LIMIT 20\"\n            );\n            \n            System.out.println(\"\\n--- LISTA REZERVĂRI (ultimele 20) ---\");\n            System.out.printf(\"%-15s %-10s %-12s %-12s %-12s %-10s\\n\", \n                \"Nume Client\", \"Cameră\", \"Check-in\", \"Check-out\", \"Status\", \"Total\");\n            System.out.println(\"─\".repeat(80));\n            \n            while (rs.next()) {\n                System.out.printf(\"%-15s %-10s %-12s %-12s %-12s %-10.2f RON\\n\",\n                    rs.getString(\"guest_name\"),\n                    rs.getString(\"room_number\"),\n                    rs.getString(\"check_in\"),\n                    rs.getString(\"check_out\"),\n                    rs.getString(\"status\"),\n                    rs.getDouble(\"total_price\")\n                );\n            }\n            rs.close();\n            stmt.close();\n        } catch (SQLException e) {\n            System.err.println(\"Eroare la afișarea rezervărilor: \" + e.getMessage());\n        }\n    }\n    \n    private static void addBooking() {\n        System.out.println(\"\\n--- ADĂUGARE REZERVARE NOUĂ ---\");\n        System.out.print(\"Nume client: \");\n        String guestName = scanner.nextLine();\n        \n        System.out.print(\"Email client: \");\n        String guestEmail = scanner.nextLine();\n        \n        System.out.print(\"Telefon client: \");\n        String guestPhone = scanner.nextLine();\n        \n        displayRooms();\n        System.out.print(\"\\nNumăr cameră: \");\n        String roomNumber = scanner.nextLine();\n        \n        System.out.print(\"Data check-in (YYYY-MM-DD): \");\n        String checkIn = scanner.nextLine();\n        \n        System.out.print(\"Data check-out (YYYY-MM-DD): \");\n        String checkOut = scanner.nextLine();\n        \n        System.out.print(\"Preț total (RON): \");\n        double totalPrice = getDoubleInput();\n        \n        scanner.nextLine(); // consume newline\n        \n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            \n            // Get room ID\n            PreparedStatement getRoomStmt = conn.prepareStatement(\"SELECT id FROM rooms WHERE room_number = ?\");\n            getRoomStmt.setString(1, roomNumber);\n            ResultSet rs = getRoomStmt.executeQuery();\n            \n            if (rs.next()) {\n                int roomId = rs.getInt(\"id\");\n                \n                PreparedStatement pstmt = conn.prepareStatement(\n                    \"INSERT INTO bookings (room_id, guest_name, guest_email, guest_phone, check_in, check_out, total_price, status) VALUES (?, ?, ?, ?, ?, ?, ?, 'confirmed')\"\n                );\n                pstmt.setInt(1, roomId);\n                pstmt.setString(2, guestName);\n                pstmt.setString(3, guestEmail);\n                pstmt.setString(4, guestPhone);\n                pstmt.setString(5, checkIn);\n                pstmt.setString(6, checkOut);\n                pstmt.setDouble(7, totalPrice);\n                pstmt.executeUpdate();\n                pstmt.close();\n                \n                System.out.println(\"✓ Rezervare adăugată cu succes!\");\n            } else {\n                System.out.println(\"Camera nu a fost găsită!\");\n            }\n            \n            rs.close();\n            getRoomStmt.close();\n        } catch (SQLException e) {\n            System.err.println(\"Eroare la adăugarea rezervării: \" + e.getMessage());\n        }\n    }\n    \n    private static void manageReviews() {\n        System.out.println(\"=== GESTIONARE RECENZII ===\");\n        System.out.println(\"1. Afișare toate recenziile\");\n        System.out.println(\"2. Înapoi\");\n        System.out.print(\"\\nAlegeți o opțiune: \");\n        \n        int choice = getIntInput();\n        \n        if (choice == 1) {\n            displayReviews();\n        }\n    }\n    \n    private static void displayReviews() {\n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\n                \"SELECT r.*, rm.room_number FROM reviews r JOIN rooms rm ON r.room_id = rm.id ORDER BY r.created_at DESC LIMIT 20\"\n            );\n            \n            System.out.println(\"\\n--- LISTA RECENZII (ultimele 20) ---\");\n            System.out.printf(\"%-15s %-10s %-7s %-40s\\n\", \n                \"Nume Client\", \"Cameră\", \"Rating\", \"Comentariu\");\n            System.out.println(\"─\".repeat(80));\n            \n            while (rs.next()) {\n                String comment = rs.getString(\"comment\");\n                if (comment.length() > 37) {\n                    comment = comment.substring(0, 37) + \"...\";\n                }\n                System.out.printf(\"%-15s %-10s %-7d %-40s\\n\",\n                    rs.getString(\"guest_name\"),\n                    rs.getString(\"room_number\"),\n                    rs.getInt(\"rating\"),\n                    comment\n                );\n            }\n            rs.close();\n            stmt.close();\n        } catch (SQLException e) {\n            System.err.println(\"Eroare la afișarea recenziilor: \" + e.getMessage());\n        }\n    }\n    \n    private static void showAnalytics() {\n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            \n            // Total rooms\n            Statement stmt1 = conn.createStatement();\n            ResultSet rs1 = stmt1.executeQuery(\"SELECT COUNT(*) as total FROM rooms\");\n            rs1.next();\n            int totalRooms = rs1.getInt(\"total\");\n            rs1.close();\n            stmt1.close();\n            \n            // Total bookings\n            Statement stmt2 = conn.createStatement();\n            ResultSet rs2 = stmt2.executeQuery(\"SELECT COUNT(*) as total FROM bookings\");\n            rs2.next();\n            int totalBookings = rs2.getInt(\"total\");\n            rs2.close();\n            stmt2.close();\n            \n            // Total revenue\n            Statement stmt3 = conn.createStatement();\n            ResultSet rs3 = stmt3.executeQuery(\"SELECT COALESCE(SUM(total_price), 0) as total FROM bookings WHERE status = 'confirmed'\");\n            rs3.next();\n            double totalRevenue = rs3.getDouble(\"total\");\n            rs3.close();\n            stmt3.close();\n            \n            // Average rating\n            Statement stmt4 = conn.createStatement();\n            ResultSet rs4 = stmt4.executeQuery(\"SELECT COALESCE(AVG(rating), 0) as avg FROM reviews\");\n            rs4.next();\n            double avgRating = rs4.getDouble(\"avg\");\n            rs4.close();\n            stmt4.close();\n            \n            System.out.println(\"\\n=== ANALITICĂ ===\");\n            System.out.println(\"─\".repeat(40));\n            System.out.printf(\"Total Camere:        %d\\n\", totalRooms);\n            System.out.printf(\"Total Rezervări:     %d\\n\", totalBookings);\n            System.out.printf(\"Venit Total:         %.2f RON\\n\", totalRevenue);\n            System.out.printf(\"Rating Mediu:        %.2f/5\\n\", avgRating);\n            System.out.println(\"─\".repeat(40));\n            \n        } catch (SQLException e) {\n            System.err.println(\"Eroare la afișarea analiticii: \" + e.getMessage());\n        }\n    }\n    \n    private static int getIntInput() {\n        while (!scanner.hasNextInt()) {\n            System.out.print(\"Vă rugăm introduceți un număr valid: \");\n            scanner.next();\n        }\n        int value = scanner.nextInt();\n        return value;\n    }\n    \n    private static double getDoubleInput() {\n        while (!scanner.hasNextDouble()) {\n            System.out.print(\"Vă rugăm introduceți un număr valid: \");\n            scanner.next();\n        }\n        double value = scanner.nextDouble();\n        return value;\n    }\n}\n","size_bytes":13691},"src/main/java/com/bookerino/database/DatabaseConnection.java":{"content":"\npackage com.bookerino.database;\n\nimport java.sql.*;\n\npublic class DatabaseConnection {\n    private static Connection connection;\n    \n    public static void initialize() throws SQLException {\n        String dbUrl = System.getenv(\"DATABASE_URL\");\n        if (dbUrl == null) {\n            throw new RuntimeException(\"DATABASE_URL environment variable not set\");\n        }\n        \n        connection = DriverManager.getConnection(dbUrl);\n        createTables();\n    }\n    \n    public static Connection getConnection() {\n        return connection;\n    }\n    \n    private static void createTables() throws SQLException {\n        Statement stmt = connection.createStatement();\n        \n        // Create users table\n        stmt.execute(\n            \"CREATE TABLE IF NOT EXISTS users (\" +\n            \"id VARCHAR(255) PRIMARY KEY, \" +\n            \"username VARCHAR(255) NOT NULL UNIQUE, \" +\n            \"email VARCHAR(255), \" +\n            \"profile_image_url TEXT, \" +\n            \"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \" +\n            \"updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\"\n        );\n        \n        // Create rooms table\n        stmt.execute(\n            \"CREATE TABLE IF NOT EXISTS rooms (\" +\n            \"id SERIAL PRIMARY KEY, \" +\n            \"name VARCHAR(255) NOT NULL, \" +\n            \"type VARCHAR(100) NOT NULL, \" +\n            \"capacity INTEGER NOT NULL, \" +\n            \"price DECIMAL(10,2) NOT NULL, \" +\n            \"status VARCHAR(50) DEFAULT 'available', \" +\n            \"image_url TEXT, \" +\n            \"description TEXT, \" +\n            \"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\"\n        );\n        \n        // Create bookings table\n        stmt.execute(\n            \"CREATE TABLE IF NOT EXISTS bookings (\" +\n            \"id SERIAL PRIMARY KEY, \" +\n            \"guest_name VARCHAR(255) NOT NULL, \" +\n            \"guest_email VARCHAR(255) NOT NULL, \" +\n            \"room_id INTEGER REFERENCES rooms(id), \" +\n            \"check_in DATE NOT NULL, \" +\n            \"check_out DATE NOT NULL, \" +\n            \"status VARCHAR(50) DEFAULT 'pending', \" +\n            \"total_price DECIMAL(10,2), \" +\n            \"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\"\n        );\n        \n        // Create reviews table\n        stmt.execute(\n            \"CREATE TABLE IF NOT EXISTS reviews (\" +\n            \"id SERIAL PRIMARY KEY, \" +\n            \"room_id INTEGER REFERENCES rooms(id), \" +\n            \"guest_name VARCHAR(255) NOT NULL, \" +\n            \"rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5), \" +\n            \"comment TEXT, \" +\n            \"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\"\n        );\n        \n        stmt.close();\n        System.out.println(\"Database tables created successfully\");\n    }\n}\n","size_bytes":2756},"src/main/java/com/bookerino/handlers/AnalyticsHandler.java":{"content":"\npackage com.bookerino.handlers;\n\nimport com.sun.net.httpserver.*;\nimport com.bookerino.database.DatabaseConnection;\nimport org.json.*;\nimport java.io.*;\nimport java.sql.*;\n\npublic class AnalyticsHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) throws IOException {\n        try {\n            Connection conn = DatabaseConnection.getConnection();\n            JSONObject analytics = new JSONObject();\n            \n            // Total bookings\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT COUNT(*) as total FROM bookings\");\n            if (rs.next()) {\n                analytics.put(\"totalBookings\", rs.getInt(\"total\"));\n            }\n            \n            // Total revenue\n            rs = stmt.executeQuery(\"SELECT SUM(total_price) as revenue FROM bookings WHERE status = 'confirmed'\");\n            if (rs.next()) {\n                analytics.put(\"totalRevenue\", rs.getDouble(\"revenue\"));\n            }\n            \n            // Average rating\n            rs = stmt.executeQuery(\"SELECT AVG(rating) as avg_rating FROM reviews\");\n            if (rs.next()) {\n                analytics.put(\"averageRating\", rs.getDouble(\"avg_rating\"));\n            }\n            \n            // Occupancy rate\n            rs = stmt.executeQuery(\"SELECT COUNT(*) as occupied FROM rooms WHERE status = 'occupied'\");\n            int occupied = 0;\n            if (rs.next()) {\n                occupied = rs.getInt(\"occupied\");\n            }\n            rs = stmt.executeQuery(\"SELECT COUNT(*) as total FROM rooms\");\n            int total = 0;\n            if (rs.next()) {\n                total = rs.getInt(\"total\");\n            }\n            analytics.put(\"occupancyRate\", total > 0 ? (occupied * 100.0 / total) : 0);\n            \n            rs.close();\n            stmt.close();\n            \n            sendResponse(exchange, 200, analytics.toString());\n        } catch (Exception e) {\n            sendResponse(exchange, 500, \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\");\n        }\n    }\n    \n    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {\n        exchange.getResponseHeaders().add(\"Content-Type\", \"application/json\");\n        exchange.sendResponseHeaders(statusCode, response.getBytes().length);\n        OutputStream os = exchange.getResponseBody();\n        os.write(response.getBytes());\n        os.close();\n    }\n}\n","size_bytes":2465},"src/main/java/com/bookerino/handlers/BookingHandler.java":{"content":"\npackage com.bookerino.handlers;\n\nimport com.sun.net.httpserver.*;\nimport com.bookerino.database.DatabaseConnection;\nimport org.json.*;\nimport java.io.*;\nimport java.sql.*;\n\npublic class BookingHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) throws IOException {\n        String method = exchange.getRequestMethod();\n        \n        try {\n            if (\"GET\".equals(method)) {\n                handleGet(exchange);\n            } else if (\"POST\".equals(method)) {\n                handlePost(exchange);\n            } else {\n                sendResponse(exchange, 405, \"{\\\"error\\\": \\\"Method not allowed\\\"}\");\n            }\n        } catch (Exception e) {\n            sendResponse(exchange, 500, \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\");\n        }\n    }\n    \n    private void handleGet(HttpExchange exchange) throws SQLException, IOException {\n        Connection conn = DatabaseConnection.getConnection();\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.executeQuery(\"SELECT * FROM bookings ORDER BY created_at DESC\");\n        \n        JSONArray bookings = new JSONArray();\n        while (rs.next()) {\n            JSONObject booking = new JSONObject();\n            booking.put(\"id\", rs.getInt(\"id\"));\n            booking.put(\"guestName\", rs.getString(\"guest_name\"));\n            booking.put(\"guestEmail\", rs.getString(\"guest_email\"));\n            booking.put(\"roomId\", rs.getInt(\"room_id\"));\n            booking.put(\"checkIn\", rs.getDate(\"check_in\").toString());\n            booking.put(\"checkOut\", rs.getDate(\"check_out\").toString());\n            booking.put(\"status\", rs.getString(\"status\"));\n            booking.put(\"totalPrice\", rs.getDouble(\"total_price\"));\n            bookings.put(booking);\n        }\n        \n        rs.close();\n        stmt.close();\n        \n        sendResponse(exchange, 200, bookings.toString());\n    }\n    \n    private void handlePost(HttpExchange exchange) throws IOException, SQLException {\n        InputStreamReader isr = new InputStreamReader(exchange.getRequestBody());\n        BufferedReader br = new BufferedReader(isr);\n        StringBuilder body = new StringBuilder();\n        String line;\n        while ((line = br.readLine()) != null) {\n            body.append(line);\n        }\n        \n        JSONObject json = new JSONObject(body.toString());\n        \n        Connection conn = DatabaseConnection.getConnection();\n        PreparedStatement pstmt = conn.prepareStatement(\n            \"INSERT INTO bookings (guest_name, guest_email, room_id, check_in, check_out, status, total_price) VALUES (?, ?, ?, ?, ?, ?, ?)\",\n            Statement.RETURN_GENERATED_KEYS\n        );\n        \n        pstmt.setString(1, json.getString(\"guestName\"));\n        pstmt.setString(2, json.getString(\"guestEmail\"));\n        pstmt.setInt(3, json.getInt(\"roomId\"));\n        pstmt.setDate(4, Date.valueOf(json.getString(\"checkIn\")));\n        pstmt.setDate(5, Date.valueOf(json.getString(\"checkOut\")));\n        pstmt.setString(6, json.optString(\"status\", \"pending\"));\n        pstmt.setDouble(7, json.getDouble(\"totalPrice\"));\n        \n        pstmt.executeUpdate();\n        ResultSet rs = pstmt.getGeneratedKeys();\n        \n        if (rs.next()) {\n            json.put(\"id\", rs.getInt(1));\n        }\n        \n        rs.close();\n        pstmt.close();\n        \n        sendResponse(exchange, 201, json.toString());\n    }\n    \n    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {\n        exchange.getResponseHeaders().add(\"Content-Type\", \"application/json\");\n        exchange.sendResponseHeaders(statusCode, response.getBytes().length);\n        OutputStream os = exchange.getResponseBody();\n        os.write(response.getBytes());\n        os.close();\n    }\n}\n","size_bytes":3801},"src/main/java/com/bookerino/handlers/ReviewHandler.java":{"content":"\npackage com.bookerino.handlers;\n\nimport com.sun.net.httpserver.*;\nimport com.bookerino.database.DatabaseConnection;\nimport org.json.*;\nimport java.io.*;\nimport java.sql.*;\n\npublic class ReviewHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) throws IOException {\n        String method = exchange.getRequestMethod();\n        \n        try {\n            if (\"GET\".equals(method)) {\n                handleGet(exchange);\n            } else if (\"POST\".equals(method)) {\n                handlePost(exchange);\n            } else {\n                sendResponse(exchange, 405, \"{\\\"error\\\": \\\"Method not allowed\\\"}\");\n            }\n        } catch (Exception e) {\n            sendResponse(exchange, 500, \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\");\n        }\n    }\n    \n    private void handleGet(HttpExchange exchange) throws SQLException, IOException {\n        Connection conn = DatabaseConnection.getConnection();\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.executeQuery(\"SELECT * FROM reviews ORDER BY created_at DESC\");\n        \n        JSONArray reviews = new JSONArray();\n        while (rs.next()) {\n            JSONObject review = new JSONObject();\n            review.put(\"id\", rs.getInt(\"id\"));\n            review.put(\"roomId\", rs.getInt(\"room_id\"));\n            review.put(\"guestName\", rs.getString(\"guest_name\"));\n            review.put(\"rating\", rs.getInt(\"rating\"));\n            review.put(\"comment\", rs.getString(\"comment\"));\n            reviews.put(review);\n        }\n        \n        rs.close();\n        stmt.close();\n        \n        sendResponse(exchange, 200, reviews.toString());\n    }\n    \n    private void handlePost(HttpExchange exchange) throws IOException, SQLException {\n        InputStreamReader isr = new InputStreamReader(exchange.getRequestBody());\n        BufferedReader br = new BufferedReader(isr);\n        StringBuilder body = new StringBuilder();\n        String line;\n        while ((line = br.readLine()) != null) {\n            body.append(line);\n        }\n        \n        JSONObject json = new JSONObject(body.toString());\n        \n        Connection conn = DatabaseConnection.getConnection();\n        PreparedStatement pstmt = conn.prepareStatement(\n            \"INSERT INTO reviews (room_id, guest_name, rating, comment) VALUES (?, ?, ?, ?)\",\n            Statement.RETURN_GENERATED_KEYS\n        );\n        \n        pstmt.setInt(1, json.getInt(\"roomId\"));\n        pstmt.setString(2, json.getString(\"guestName\"));\n        pstmt.setInt(3, json.getInt(\"rating\"));\n        pstmt.setString(4, json.optString(\"comment\", \"\"));\n        \n        pstmt.executeUpdate();\n        ResultSet rs = pstmt.getGeneratedKeys();\n        \n        if (rs.next()) {\n            json.put(\"id\", rs.getInt(1));\n        }\n        \n        rs.close();\n        pstmt.close();\n        \n        sendResponse(exchange, 201, json.toString());\n    }\n    \n    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {\n        exchange.getResponseHeaders().add(\"Content-Type\", \"application/json\");\n        exchange.sendResponseHeaders(statusCode, response.getBytes().length);\n        OutputStream os = exchange.getResponseBody();\n        os.write(response.getBytes());\n        os.close();\n    }\n}\n","size_bytes":3310},"src/main/java/com/bookerino/handlers/RoomHandler.java":{"content":"\npackage com.bookerino.handlers;\n\nimport com.sun.net.httpserver.*;\nimport com.bookerino.database.DatabaseConnection;\nimport org.json.*;\nimport java.io.*;\nimport java.sql.*;\nimport java.util.*;\n\npublic class RoomHandler implements HttpHandler {\n    @Override\n    public void handle(HttpExchange exchange) throws IOException {\n        String method = exchange.getRequestMethod();\n        \n        try {\n            if (\"GET\".equals(method)) {\n                handleGet(exchange);\n            } else if (\"POST\".equals(method)) {\n                handlePost(exchange);\n            } else {\n                sendResponse(exchange, 405, \"{\\\"error\\\": \\\"Method not allowed\\\"}\");\n            }\n        } catch (Exception e) {\n            sendResponse(exchange, 500, \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\");\n        }\n    }\n    \n    private void handleGet(HttpExchange exchange) throws SQLException, IOException {\n        Connection conn = DatabaseConnection.getConnection();\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.executeQuery(\"SELECT * FROM rooms ORDER BY created_at DESC\");\n        \n        JSONArray rooms = new JSONArray();\n        while (rs.next()) {\n            JSONObject room = new JSONObject();\n            room.put(\"id\", rs.getInt(\"id\"));\n            room.put(\"name\", rs.getString(\"name\"));\n            room.put(\"type\", rs.getString(\"type\"));\n            room.put(\"capacity\", rs.getInt(\"capacity\"));\n            room.put(\"price\", rs.getDouble(\"price\"));\n            room.put(\"status\", rs.getString(\"status\"));\n            room.put(\"imageUrl\", rs.getString(\"image_url\"));\n            room.put(\"description\", rs.getString(\"description\"));\n            rooms.put(room);\n        }\n        \n        rs.close();\n        stmt.close();\n        \n        sendResponse(exchange, 200, rooms.toString());\n    }\n    \n    private void handlePost(HttpExchange exchange) throws IOException, SQLException {\n        InputStreamReader isr = new InputStreamReader(exchange.getRequestBody());\n        BufferedReader br = new BufferedReader(isr);\n        StringBuilder body = new StringBuilder();\n        String line;\n        while ((line = br.readLine()) != null) {\n            body.append(line);\n        }\n        \n        JSONObject json = new JSONObject(body.toString());\n        \n        Connection conn = DatabaseConnection.getConnection();\n        PreparedStatement pstmt = conn.prepareStatement(\n            \"INSERT INTO rooms (name, type, capacity, price, status, image_url, description) VALUES (?, ?, ?, ?, ?, ?, ?)\",\n            Statement.RETURN_GENERATED_KEYS\n        );\n        \n        pstmt.setString(1, json.getString(\"name\"));\n        pstmt.setString(2, json.getString(\"type\"));\n        pstmt.setInt(3, json.getInt(\"capacity\"));\n        pstmt.setDouble(4, json.getDouble(\"price\"));\n        pstmt.setString(5, json.optString(\"status\", \"available\"));\n        pstmt.setString(6, json.optString(\"imageUrl\", \"\"));\n        pstmt.setString(7, json.optString(\"description\", \"\"));\n        \n        pstmt.executeUpdate();\n        ResultSet rs = pstmt.getGeneratedKeys();\n        \n        if (rs.next()) {\n            json.put(\"id\", rs.getInt(1));\n        }\n        \n        rs.close();\n        pstmt.close();\n        \n        sendResponse(exchange, 201, json.toString());\n    }\n    \n    private void sendResponse(HttpExchange exchange, int statusCode, String response) throws IOException {\n        exchange.getResponseHeaders().add(\"Content-Type\", \"application/json\");\n        exchange.sendResponseHeaders(statusCode, response.getBytes().length);\n        OutputStream os = exchange.getResponseBody();\n        os.write(response.getBytes());\n        os.close();\n    }\n}\n","size_bytes":3691},"src/main/java/com/bookerino/server/HttpServer.java":{"content":"\npackage com.bookerino.server;\n\nimport com.sun.net.httpserver.*;\nimport com.bookerino.handlers.*;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\npublic class HttpServer {\n    private final int port;\n    private com.sun.net.httpserver.HttpServer server;\n    \n    public HttpServer(int port) {\n        this.port = port;\n    }\n    \n    public void start() throws IOException {\n        server = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(\"0.0.0.0\", port), 0);\n        \n        // API endpoints\n        server.createContext(\"/api/rooms\", new RoomHandler());\n        server.createContext(\"/api/bookings\", new BookingHandler());\n        server.createContext(\"/api/reviews\", new ReviewHandler());\n        server.createContext(\"/api/analytics\", new AnalyticsHandler());\n        \n        server.setExecutor(null);\n        server.start();\n    }\n}\n","size_bytes":873},"client/src/components/meal-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertMealSchema, type Meal, type InsertMeal } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { format } from \"date-fns\";\n\ninterface MealDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  meal?: Meal;\n}\n\nconst DAYS = [\n  { id: \"1\", label: \"Luni\" },\n  { id: \"2\", label: \"Marți\" },\n  { id: \"3\", label: \"Miercuri\" },\n  { id: \"4\", label: \"Joi\" },\n  { id: \"5\", label: \"Vineri\" },\n  { id: \"6\", label: \"Sâmbătă\" },\n  { id: \"7\", label: \"Duminică\" },\n];\n\nexport function MealDialog({ open, onOpenChange, meal }: MealDialogProps) {\n  const { toast } = useToast();\n  const isEdit = !!meal;\n\n  const form = useForm<InsertMeal>({\n    resolver: zodResolver(insertMealSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      price: \"0\",\n      validFrom: undefined,\n      validTo: undefined,\n      availableDays: \"1,2,3,4,5,6,7\",\n      isActive: 1,\n    },\n  });\n\n  useEffect(() => {\n    if (open) {\n      if (meal) {\n        form.reset({\n          name: meal.name,\n          description: meal.description,\n          category: meal.category,\n          price: meal.price,\n          validFrom: meal.validFrom ? new Date(meal.validFrom) : undefined,\n          validTo: meal.validTo ? new Date(meal.validTo) : undefined,\n          availableDays: meal.availableDays,\n          isActive: meal.isActive,\n        });\n      } else {\n        form.reset({\n          name: \"\",\n          description: \"\",\n          category: \"\",\n          price: \"0\",\n          validFrom: undefined,\n          validTo: undefined,\n          availableDays: \"1,2,3,4,5,6,7\",\n          isActive: 1,\n        });\n      }\n    }\n  }, [open, meal, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertMeal) => apiRequest(\"POST\", \"/api/meals\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Masa a fost adăugată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut adăuga masa\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertMeal) =>\n      apiRequest(\"PATCH\", `/api/meals/${meal?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Masa a fost actualizată cu succes\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut actualiza masa\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertMeal) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const selectedDays = (form.watch(\"availableDays\") || \"\").split(\",\").filter(Boolean);\n\n  const toggleDay = (dayId: string) => {\n    const currentDays = selectedDays;\n    const newDays = currentDays.includes(dayId)\n      ? currentDays.filter(d => d !== dayId)\n      : [...currentDays, dayId];\n    \n    form.setValue(\"availableDays\", newDays.sort((a, b) => Number(a) - Number(b)).join(\",\"));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"dialog-title-meal\">\n            {isEdit ? \"Editează Masa\" : \"Adaugă Masă Nouă\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEdit\n              ? \"Modifică detaliile mesei și setările de valabilitate\"\n              : \"Completează detaliile noii mese și setează valabilitatea\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nume Masă *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"ex: Pizza Margherita\" {...field} data-testid=\"input-meal-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descriere *</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Descrierea mesei...\" \n                      {...field} \n                      data-testid=\"input-meal-description\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Categorie *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"ex: Pizza\" {...field} data-testid=\"input-meal-category\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Preț (RON) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        data-testid=\"input-meal-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"validFrom\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Valabil De La</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        value={field.value ? format(new Date(field.value), \"yyyy-MM-dd\") : \"\"}\n                        onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                        data-testid=\"input-meal-valid-from\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"validTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Valabil Până La</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        value={field.value ? format(new Date(field.value), \"yyyy-MM-dd\") : \"\"}\n                        onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                        data-testid=\"input-meal-valid-to\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"availableDays\"\n              render={() => (\n                <FormItem>\n                  <FormLabel>Zile Disponibile</FormLabel>\n                  <div className=\"flex flex-wrap gap-4\">\n                    {DAYS.map((day) => (\n                      <div key={day.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`day-${day.id}`}\n                          checked={selectedDays.includes(day.id)}\n                          onCheckedChange={() => toggleDay(day.id)}\n                          data-testid={`checkbox-day-${day.id}`}\n                        />\n                        <label\n                          htmlFor={`day-${day.id}`}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                        >\n                          {day.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center space-x-2 space-y-0\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value === 1}\n                      onCheckedChange={(checked) => field.onChange(checked ? 1 : 0)}\n                      data-testid=\"checkbox-meal-active\"\n                    />\n                  </FormControl>\n                  <FormLabel className=\"!mt-0\">Masă Activă</FormLabel>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-meal\"\n              >\n                Anulează\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n                data-testid=\"button-submit-meal\"\n              >\n                {isEdit ? \"Salvează\" : \"Adaugă\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11151},"client/src/components/scroll-to-top.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowUp } from \"lucide-react\";\n\nexport function ScrollToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      const scrollableElement = document.querySelector('[data-scroll-container]');\n      const scrollTop = scrollableElement \n        ? scrollableElement.scrollTop \n        : window.scrollY || document.documentElement.scrollTop;\n      \n      setIsVisible(scrollTop > 300);\n    };\n\n    const scrollableElement = document.querySelector('[data-scroll-container]');\n    \n    if (scrollableElement) {\n      scrollableElement.addEventListener('scroll', toggleVisibility);\n    } else {\n      window.addEventListener('scroll', toggleVisibility);\n    }\n    \n    toggleVisibility();\n\n    return () => {\n      if (scrollableElement) {\n        scrollableElement.removeEventListener('scroll', toggleVisibility);\n      } else {\n        window.removeEventListener('scroll', toggleVisibility);\n      }\n    };\n  }, [location]);\n\n  const scrollToTop = () => {\n    const scrollableElement = document.querySelector('[data-scroll-container]');\n    if (scrollableElement) {\n      scrollableElement.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    } else {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return (\n    <Button\n      data-testid=\"button-scroll-to-top\"\n      size=\"icon\"\n      className={`fixed bottom-6 right-6 z-50 shadow-lg transition-opacity duration-200 ${\n        isVisible ? 'opacity-100' : 'opacity-0 pointer-events-none'\n      }`}\n      onClick={scrollToTop}\n      aria-label=\"Scroll to top\"\n      aria-hidden={!isVisible}\n    >\n      <ArrowUp className=\"h-5 w-5\" />\n    </Button>\n  );\n}\n","size_bytes":1902},"client/src/pages/meals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { type Meal } from \"@shared/schema\";\nimport { MealDialog } from \"@/components/meal-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus, Trash2, Edit, ChevronUp } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format, parseISO, isWithinInterval } from \"date-fns\";\n\nexport default function Meals() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingMeal, setEditingMeal] = useState<Meal | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  const { data: meals, isLoading } = useQuery<Meal[]>({\n    queryKey: [\"/api/meals\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/meals/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Masa a fost ștearsă cu succes\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-a putut șterge masa\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const consumeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/meals/${id}/consume`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({\n        title: \"Succes\",\n        description: \"Consumul a fost înregistrat\",\n      });\n    },\n  });\n\n  const handleEdit = (meal: Meal) => {\n    setEditingMeal(meal);\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Sigur vrei să ștergi această masă?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingMeal(undefined);\n    setDialogOpen(true);\n  };\n\n  const handleConsume = (id: string) => {\n    consumeMutation.mutate(id);\n  };\n\n  const isAvailableNow = (meal: Meal) => {\n    const now = new Date();\n    \n    if (meal.validFrom && meal.validTo) {\n      const validFrom = parseISO(meal.validFrom.toString());\n      const validTo = parseISO(meal.validTo.toString());\n      if (!isWithinInterval(now, { start: validFrom, end: validTo })) {\n        return false;\n      }\n    }\n    \n    const dayOfWeek = now.getDay() === 0 ? 7 : now.getDay();\n    const availableDays = meal.availableDays.split(',').map(Number);\n    \n    return availableDays.includes(dayOfWeek) && meal.isActive === 1;\n  };\n\n  const categories = Array.from(new Set(meals?.map(m => m.category).filter(c => c && c.trim() !== '') || []));\n\n  const filteredMeals = meals?.filter((meal) => {\n    const matchesSearch =\n      searchQuery === \"\" ||\n      meal.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      meal.description.toLowerCase().includes(searchQuery.toLowerCase());\n\n    const matchesCategory = categoryFilter === \"all\" || meal.category === categoryFilter;\n\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"flex-1 overflow-auto\" data-scroll-container>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Mese & Meniuri Restaurant</h1>\n            <p className=\"text-muted-foreground\">Gestionează meniurile restaurantului și valabilitatea acestora</p>\n          </div>\n          <Button onClick={handleAddNew} data-testid=\"button-add-meal\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adaugă Masă\n          </Button>\n        </div>\n\n        <div className=\"flex items-center gap-3 flex-wrap\">\n          <div className=\"relative flex-1 min-w-[200px]\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Caută mese...\"\n              className=\"pl-9\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search-meals\"\n            />\n          </div>\n          <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-category-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Toate Categoriile</SelectItem>\n              {categories.map(cat => (\n                <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-16 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredMeals && filteredMeals.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredMeals.map((meal) => (\n              <Card key={meal.id} data-testid={`meal-card-${meal.id}`}>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold truncate\" data-testid={`meal-name-${meal.id}`}>\n                      {meal.name}\n                    </h3>\n                    <div className=\"flex items-center gap-2 mt-1 flex-wrap\">\n                      <Badge variant=\"outline\" className=\"text-xs\" data-testid={`meal-category-${meal.id}`}>\n                        {meal.category}\n                      </Badge>\n                      {isAvailableNow(meal) ? (\n                        <Badge variant=\"default\" className=\"text-xs bg-green-600\">Disponibil</Badge>\n                      ) : (\n                        <Badge variant=\"secondary\" className=\"text-xs\">Indisponibil</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => handleEdit(meal)}\n                      data-testid={`button-edit-meal-${meal.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => handleDelete(meal.id)}\n                      data-testid={`button-delete-meal-${meal.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`meal-description-${meal.id}`}>\n                    {meal.description}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold\" data-testid={`meal-price-${meal.id}`}>\n                      {parseFloat(meal.price).toFixed(2)} RON\n                    </span>\n                  </div>\n                  {meal.validFrom && meal.validTo && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      <div>Valabil: {format(parseISO(meal.validFrom.toString()), \"dd.MM.yyyy\")} - {format(parseISO(meal.validTo.toString()), \"dd.MM.yyyy\")}</div>\n                    </div>\n                  )}\n                  <div className=\"text-xs text-muted-foreground\">\n                    Consum: <span className=\"font-semibold\" data-testid={`meal-consumption-${meal.id}`}>{meal.consumptionCount || 0}</span> porții\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => handleConsume(meal.id)}\n                    disabled={!isAvailableNow(meal)}\n                    data-testid={`button-consume-meal-${meal.id}`}\n                  >\n                    <ChevronUp className=\"h-4 w-4 mr-2\" />\n                    Înregistrează Consum\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <p className=\"text-muted-foreground\">Nu există mese disponibile</p>\n              <Button onClick={handleAddNew} className=\"mt-4\" data-testid=\"button-add-first-meal\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Adaugă Prima Masă\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <MealDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        meal={editingMeal}\n      />\n    </div>\n  );\n}\n","size_bytes":9850},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Settings as SettingsIcon, Plug, Key, Save, Trash2 } from \"lucide-react\";\nimport type { Integration } from \"@shared/schema\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [bookingComConfig, setBookingComConfig] = useState({\n    apiKey: \"\",\n    apiSecret: \"\",\n    propertyId: \"\",\n    isActive: false,\n  });\n\n  const [googleAdsConfig, setGoogleAdsConfig] = useState({\n    apiKey: \"\",\n    apiSecret: \"\",\n    propertyId: \"\",\n    isActive: false,\n  });\n\n  const { data: integrations = [] } = useQuery<Integration[]>({\n    queryKey: [\"/api/integrations\"],\n  });\n\n  const bookingComIntegration = integrations.find(i => i.platform === \"booking.com\");\n  const googleAdsIntegration = integrations.find(i => i.platform === \"google-ads\");\n\n  useEffect(() => {\n    if (bookingComIntegration) {\n      setBookingComConfig({\n        apiKey: bookingComIntegration.apiKey || \"\",\n        apiSecret: bookingComIntegration.apiSecret || \"\",\n        propertyId: bookingComIntegration.propertyId || \"\",\n        isActive: bookingComIntegration.isActive === 1,\n      });\n    }\n  }, [bookingComIntegration]);\n\n  useEffect(() => {\n    if (googleAdsIntegration) {\n      setGoogleAdsConfig({\n        apiKey: googleAdsIntegration.apiKey || \"\",\n        apiSecret: googleAdsIntegration.apiSecret || \"\",\n        propertyId: googleAdsIntegration.propertyId || \"\",\n        isActive: googleAdsIntegration.isActive === 1,\n      });\n    }\n  }, [googleAdsIntegration]);\n\n  const saveIntegrationMutation = useMutation({\n    mutationFn: async (data: { platform: string; apiKey: string; apiSecret: string; propertyId: string; isActive: number; existingId?: string }) => {\n      if (data.existingId) {\n        const { existingId, ...updateData } = data;\n        return await apiRequest(\"PATCH\", `/api/integrations/${existingId}`, updateData);\n      } else {\n        const { existingId, ...createData } = data;\n        return await apiRequest(\"POST\", \"/api/integrations\", createData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({\n        title: \"Salvat cu succes\",\n        description: \"Setările integrării au fost actualizate.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Eroare\",\n        description: \"Nu s-au putut salva setările integrării.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteIntegrationMutation = useMutation({\n    mutationFn: async (data: { id: string; platform: string }) => {\n      return await apiRequest(\"DELETE\", `/api/integrations/${data.id}`);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      if (variables.platform === \"booking.com\") {\n        setBookingComConfig({\n          apiKey: \"\",\n          apiSecret: \"\",\n          propertyId: \"\",\n          isActive: false,\n        });\n      } else if (variables.platform === \"google-ads\") {\n        setGoogleAdsConfig({\n          apiKey: \"\",\n          apiSecret: \"\",\n          propertyId: \"\",\n          isActive: false,\n        });\n      }\n      toast({\n        title: \"Șters cu succes\",\n        description: \"Integrarea a fost eliminată.\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!bookingComConfig.apiKey || !bookingComConfig.propertyId) {\n      toast({\n        title: \"Eroare de validare\",\n        description: \"API Key și Property ID sunt obligatorii.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveIntegrationMutation.mutate({\n      platform: \"booking.com\",\n      apiKey: bookingComConfig.apiKey,\n      apiSecret: bookingComConfig.apiSecret,\n      propertyId: bookingComConfig.propertyId,\n      isActive: bookingComConfig.isActive ? 1 : 0,\n      existingId: bookingComIntegration?.id,\n    });\n  };\n\n  const handleSaveGoogleAds = () => {\n    if (!googleAdsConfig.apiKey || !googleAdsConfig.propertyId) {\n      toast({\n        title: \"Eroare de validare\",\n        description: \"Developer Token și Customer ID sunt obligatorii.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveIntegrationMutation.mutate({\n      platform: \"google-ads\",\n      apiKey: googleAdsConfig.apiKey,\n      apiSecret: googleAdsConfig.apiSecret,\n      propertyId: googleAdsConfig.propertyId,\n      isActive: googleAdsConfig.isActive ? 1 : 0,\n      existingId: googleAdsIntegration?.id,\n    });\n  };\n\n  return (\n    <div className=\"container max-w-7xl mx-auto p-6\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <SettingsIcon className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Settings</h1>\n          </div>\n          <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n            Manage your hotel settings and external integrations\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"integrations\" className=\"space-y-6\">\n          <TabsList data-testid=\"tabs-settings\">\n            <TabsTrigger value=\"integrations\" data-testid=\"tab-integrations\">\n              <Plug className=\"w-4 h-4 mr-2\" />\n              Integrations\n            </TabsTrigger>\n            <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n              <SettingsIcon className=\"w-4 h-4 mr-2\" />\n              General\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"integrations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-xl\" data-testid=\"text-integration-title\">Booking.com Integration</CardTitle>\n                  <CardDescription data-testid=\"text-integration-description\">\n                    Connect your Booking.com account to sync rooms and manage reservations automatically\n                  </CardDescription>\n                </div>\n                {bookingComIntegration && (\n                  <Badge \n                    variant={bookingComIntegration.isActive ? \"default\" : \"secondary\"}\n                    data-testid=\"badge-integration-status\"\n                  >\n                    {bookingComIntegration.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"apiKey\" data-testid=\"label-api-key\">\n                    <Key className=\"w-4 h-4 inline mr-2\" />\n                    API Key\n                  </Label>\n                  <Input\n                    id=\"apiKey\"\n                    data-testid=\"input-api-key\"\n                    type=\"password\"\n                    placeholder=\"Enter your Booking.com API Key\"\n                    value={bookingComConfig.apiKey}\n                    onChange={(e) => setBookingComConfig({ ...bookingComConfig, apiKey: e.target.value })}\n                  />\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-api-key-help\">\n                    Get your API key from Booking.com Connectivity settings\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"apiSecret\" data-testid=\"label-api-secret\">API Secret (Optional)</Label>\n                  <Input\n                    id=\"apiSecret\"\n                    data-testid=\"input-api-secret\"\n                    type=\"password\"\n                    placeholder=\"Enter API Secret if required\"\n                    value={bookingComConfig.apiSecret}\n                    onChange={(e) => setBookingComConfig({ ...bookingComConfig, apiSecret: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"propertyId\" data-testid=\"label-property-id\">Property ID</Label>\n                  <Input\n                    id=\"propertyId\"\n                    data-testid=\"input-property-id\"\n                    placeholder=\"Enter your Property ID\"\n                    value={bookingComConfig.propertyId}\n                    onChange={(e) => setBookingComConfig({ ...bookingComConfig, propertyId: e.target.value })}\n                  />\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-property-id-help\">\n                    Find your Property ID in your Booking.com extranet dashboard\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-muted rounded-md\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"isActive\" data-testid=\"label-integration-active\">Enable Integration</Label>\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-integration-active-help\">\n                      Activate automatic sync with Booking.com\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"isActive\"\n                    data-testid=\"switch-integration-active\"\n                    checked={bookingComConfig.isActive}\n                    onCheckedChange={(checked) => setBookingComConfig({ ...bookingComConfig, isActive: checked })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3 pt-4 border-t\">\n                <Button\n                  data-testid=\"button-save-integration\"\n                  onClick={handleSave}\n                  disabled={saveIntegrationMutation.isPending}\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveIntegrationMutation.isPending ? \"Saving...\" : \"Save Integration\"}\n                </Button>\n                \n                {bookingComIntegration && (\n                  <Button\n                    data-testid=\"button-delete-integration\"\n                    variant=\"destructive\"\n                    onClick={() => deleteIntegrationMutation.mutate({ id: bookingComIntegration.id, platform: \"booking.com\" })}\n                    disabled={deleteIntegrationMutation.isPending}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    {deleteIntegrationMutation.isPending ? \"Se șterge...\" : \"Șterge integrarea\"}\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-900 rounded-md p-4\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\" data-testid=\"text-integration-note\">\n                  <strong>Note:</strong> This integration is currently prepared for future use. \n                  Once you obtain API access from Booking.com, you can configure it here for automatic room sync and booking management.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-xl\" data-testid=\"text-googleads-title\">Integrare Google Ads</CardTitle>\n                  <CardDescription data-testid=\"text-googleads-description\">\n                    Conectează-te la Google Ads pentru monitorizarea statisticilor campaniilor de publicitate\n                  </CardDescription>\n                </div>\n                {googleAdsIntegration && (\n                  <Badge \n                    variant={googleAdsIntegration.isActive ? \"default\" : \"secondary\"}\n                    data-testid=\"badge-googleads-status\"\n                  >\n                    {googleAdsIntegration.isActive ? \"Activ\" : \"Inactiv\"}\n                  </Badge>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"googleAdsDeveloperToken\" data-testid=\"label-googleads-developer-token\">\n                    <Key className=\"w-4 h-4 inline mr-2\" />\n                    Developer Token\n                  </Label>\n                  <Input\n                    id=\"googleAdsDeveloperToken\"\n                    data-testid=\"input-googleads-developer-token\"\n                    type=\"password\"\n                    placeholder=\"Introdu Developer Token-ul tău\"\n                    value={googleAdsConfig.apiKey}\n                    onChange={(e) => setGoogleAdsConfig({ ...googleAdsConfig, apiKey: e.target.value })}\n                  />\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-googleads-developer-token-help\">\n                    Obține Developer Token din Google Ads API Center\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"googleAdsClientId\" data-testid=\"label-googleads-client-id\">Client ID</Label>\n                  <Input\n                    id=\"googleAdsClientId\"\n                    data-testid=\"input-googleads-client-id\"\n                    type=\"text\"\n                    placeholder=\"Introdu Client ID\"\n                    value={googleAdsConfig.apiSecret}\n                    onChange={(e) => setGoogleAdsConfig({ ...googleAdsConfig, apiSecret: e.target.value })}\n                  />\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-googleads-client-id-help\">\n                    Client ID din Google Cloud Console\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"googleAdsCustomerId\" data-testid=\"label-googleads-customer-id\">Customer ID</Label>\n                  <Input\n                    id=\"googleAdsCustomerId\"\n                    data-testid=\"input-googleads-customer-id\"\n                    placeholder=\"Introdu Customer ID (ex: 123-456-7890)\"\n                    value={googleAdsConfig.propertyId}\n                    onChange={(e) => setGoogleAdsConfig({ ...googleAdsConfig, propertyId: e.target.value })}\n                  />\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-googleads-customer-id-help\">\n                    Găsești Customer ID în contul tău Google Ads (în formatul 123-456-7890)\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-muted rounded-md\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"googleAdsActive\" data-testid=\"label-googleads-active\">Activează integrarea</Label>\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-googleads-active-help\">\n                      Activează monitorizarea automată a statisticilor din Google Ads\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"googleAdsActive\"\n                    data-testid=\"switch-googleads-active\"\n                    checked={googleAdsConfig.isActive}\n                    onCheckedChange={(checked) => setGoogleAdsConfig({ ...googleAdsConfig, isActive: checked })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3 pt-4 border-t\">\n                <Button\n                  data-testid=\"button-save-googleads\"\n                  onClick={handleSaveGoogleAds}\n                  disabled={saveIntegrationMutation.isPending}\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveIntegrationMutation.isPending ? \"Se salvează...\" : \"Salvează integrarea\"}\n                </Button>\n                \n                {googleAdsIntegration && (\n                  <Button\n                    data-testid=\"button-delete-googleads\"\n                    variant=\"destructive\"\n                    onClick={() => deleteIntegrationMutation.mutate({ id: googleAdsIntegration.id, platform: \"google-ads\" })}\n                    disabled={deleteIntegrationMutation.isPending}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    {deleteIntegrationMutation.isPending ? \"Se șterge...\" : \"Șterge integrarea\"}\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-900 rounded-md p-4\">\n                <p className=\"text-sm text-green-800 dark:text-green-200\" data-testid=\"text-googleads-note\">\n                  <strong>Notă:</strong> După configurarea integrării Google Ads, vei putea urmări \n                  performanța campaniilor tale de publicitate direct din dashboard. Monitorizează \n                  clicuri, conversii și ROI în timp real.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-general-title\">General Settings</CardTitle>\n              <CardDescription data-testid=\"text-general-description\">\n                Manage your hotel's basic configuration\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-general-placeholder\">\n                General settings coming soon...\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        </Tabs>\n    </div>\n  );\n}\n","size_bytes":18384}},"version":1}